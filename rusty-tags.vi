!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
A	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^impl<A: Copy> FromColor<A> for A {$/;"	c
ACCLASS	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static ACCLASS: u8 = 1;$/;"	v
AC_QUANT	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^static AC_QUANT: [i16; 128] = [$/;"	v
APP0	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static APP0: u8 = 0xE0;$/;"	v
Absolute	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    Absolute(u8, Vec<u8>),$/;"	e	enum:RLEInsn
AnonymousBlock	/home/cht/Rust/robinson/src/layout.rs	/^    AnonymousBlock,$/;"	e	enum:BoxType
ArgumentMissing	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    ArgumentMissing(String),$/;"	e	enum:Fail
AttrMap	/home/cht/Rust/robinson/src/dom.rs	/^pub type AttrMap = HashMap<String, String>;$/;"	t
BMP	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^    BMP(BMPDecoder<R>),$/;"	e	enum:InnerDecoder
BMP	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    BMP,$/;"	e	enum:ImageFormat
BMPDecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^impl<R: Read + Seek> BMPDecoder<R> {$/;"	c
BMPDecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^impl<R: Read + Seek> ImageDecoder for BMPDecoder<R> {$/;"	c
BMPDecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^pub struct BMPDecoder<R> {$/;"	s
BMPEncoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/encoder.rs	/^impl<'a, W: Write + 'a> BMPEncoder<'a, W> {$/;"	c
BMPEncoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/encoder.rs	/^pub struct BMPEncoder<'a, W: 'a> {$/;"	s
BMPHeaderType	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^enum BMPHeaderType {$/;"	g
BiLevel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/colorops.rs	/^impl ColorMap for BiLevel {$/;"	c
BiLevel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/colorops.rs	/^pub struct BiLevel;$/;"	s
BigEndian	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^    BigEndian$/;"	e	enum:ByteOrder
BitDepth	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^impl From<ColorType> for (png::ColorType, png::BitDepth) {$/;"	c
BitReader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/bitstream.rs	/^pub trait BitReader: Read {$/;"	i
BitWriter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^impl<'a, W: Write + 'a> BitWriter<'a, W> {$/;"	c
BitWriter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^pub struct BitWriter<'a, W: 'a> {$/;"	s
BitWriter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/bitstream.rs	/^pub trait BitWriter: Write {$/;"	i
Bitfield	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^impl Bitfield {$/;"	c
Bitfield	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^struct Bitfield {$/;"	s
Bitfields	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^impl Bitfields {$/;"	c
Bitfields	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^struct Bitfields {$/;"	s
Bitfields16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    Bitfields16,$/;"	e	enum:ImageType
Bitfields32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    Bitfields32,$/;"	e	enum:ImageType
Blend	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^pub trait Blend {$/;"	i
Block	/home/cht/Rust/robinson/src/style.rs	/^    Block,$/;"	e	enum:Display
BlockNode	/home/cht/Rust/robinson/src/layout.rs	/^    BlockNode(&'a StyledNode<'a>),$/;"	e	enum:BoxType
BoolReader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^impl BoolReader {$/;"	c
BoolReader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^struct BoolReader {$/;"	s
BoxType	/home/cht/Rust/robinson/src/layout.rs	/^pub enum BoxType<'a> {$/;"	g
ByteOrder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^pub enum ByteOrder {$/;"	g
CHROMABLUEID	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static CHROMABLUEID: u8 = 2;$/;"	v
CHROMADESTINATION	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static CHROMADESTINATION: u8 = 1;$/;"	v
CHROMAREDID	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static CHROMAREDID: u8 = 3;$/;"	v
COEFF_BANDS	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^static COEFF_BANDS: [u8; 16] = [0, 1, 2, 3, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7];$/;"	v
COEFF_PROBS	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^static COEFF_PROBS: TokenProbTables = [$/;"	v
COEFF_UPDATE_PROBS	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^static COEFF_UPDATE_PROBS: TokenProbTables = [$/;"	v
CONST1	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/transform.rs	/^static CONST1:$/;"	v
CONST2	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/transform.rs	/^static CONST2:$/;"	v
CONST_BITS	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/transform.rs	/^static CONST_BITS: i32 = 13;$/;"	v
Canvas	/home/cht/Rust/robinson/src/painting.rs	/^impl Canvas {$/;"	c
Canvas	/home/cht/Rust/robinson/src/painting.rs	/^pub struct Canvas {$/;"	s
CatmullRom	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^    CatmullRom,$/;"	e	enum:FilterType
Chunker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^enum Chunker<'a> {$/;"	g
Clamp	/home/cht/Rust/robinson/src/painting.rs	/^trait Clamp {$/;"	i
Code	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^type Code = u16;$/;"	t
Color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/colorops.rs	/^    type Color = Luma<u8>;$/;"	t	implementation:BiLevel
Color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/colorops.rs	/^    type Color = Rgba<u8>;$/;"	t	implementation:NeuQuant
Color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/colorops.rs	/^    type Color;$/;"	t	interface:ColorMap
Color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^type Color = Quad<i32>;$/;"	t
Color	/home/cht/Rust/robinson/src/css.rs	/^impl Copy for Color {}$/;"	c
Color	/home/cht/Rust/robinson/src/css.rs	/^pub struct Color {$/;"	s
ColorMap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/colorops.rs	/^pub trait ColorMap {$/;"	i
ColorMap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^impl ColorMap {$/;"	c
ColorMap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^struct ColorMap {$/;"	s
ColorType	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^pub enum ColorType {$/;"	g
ColorType	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/decoder.rs	/^impl From<jpeg_decoder::PixelFormat> for ColorType {$/;"	c
ColorType	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^impl From<(png::ColorType, png::BitDepth)> for ColorType {$/;"	c
ColorValue	/home/cht/Rust/robinson/src/css.rs	/^    ColorValue(Color),$/;"	e	enum:Value
Component	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^struct Component {$/;"	s
ConvertBuffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^pub trait ConvertBuffer<T> {$/;"	i
CoreHeader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    CoreHeader,$/;"	e	enum:BMPHeaderType
DCCLASS	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static DCCLASS: u8 = 0;$/;"	v
DCT_CAT_BASE	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^static DCT_CAT_BASE: [u8; 6] = [5, 7, 11, 19, 35, 67];$/;"	v
DCT_TOKEN_TREE	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^static DCT_TOKEN_TREE: [i8; 22] = [$/;"	v
DC_QUANT	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^static DC_QUANT: [i16; 128] = [$/;"	v
DHT	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static DHT: u8 = 0xC4;$/;"	v
DQT	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static DQT: u8 = 0xDB;$/;"	v
Declaration	/home/cht/Rust/robinson/src/css.rs	/^pub struct Declaration {$/;"	s
Decoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/gif.rs	/^impl<R: Read> Decoder<R> {$/;"	c
Decoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/gif.rs	/^impl<R: Read> ImageDecoder for Decoder<R> {$/;"	c
Decoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/gif.rs	/^pub struct Decoder<R: Read> {$/;"	s
DecodingBuffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^pub enum DecodingBuffer<'a> {$/;"	g
DecodingDict	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^impl DecodingDict {$/;"	c
DecodingDict	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^struct DecodingDict {$/;"	s
DecodingResult	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^pub enum DecodingResult {$/;"	g
Delta	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    Delta(u8, u8),$/;"	e	enum:RLEInsn
DimensionError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    DimensionError,$/;"	e	enum:ImageError
Dimensions	/home/cht/Rust/robinson/src/layout.rs	/^impl Dimensions {$/;"	c
Dimensions	/home/cht/Rust/robinson/src/layout.rs	/^pub struct Dimensions {$/;"	s
DirEntry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^impl DirEntry {$/;"	c
DirEntry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^struct DirEntry {$/;"	s
Directory	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/ifd.rs	/^pub type Directory = HashMap<Tag, Entry>;$/;"	t
Display	/home/cht/Rust/robinson/src/style.rs	/^pub enum Display {$/;"	g
DisplayCommand	/home/cht/Rust/robinson/src/painting.rs	/^pub enum DisplayCommand {$/;"	g
DisplayList	/home/cht/Rust/robinson/src/painting.rs	/^pub type DisplayList = Vec<DisplayCommand>;$/;"	t
DynamicImage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^impl DynamicImage {$/;"	c
DynamicImage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^impl GenericImage for DynamicImage {$/;"	c
DynamicImage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^pub enum DynamicImage {$/;"	g
EOI	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static EOI: u8 = 0xD9;$/;"	v
EdgeSizes	/home/cht/Rust/robinson/src/layout.rs	/^pub struct EdgeSizes {$/;"	s
Either	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/gif.rs	/^enum Either<T, U> {$/;"	g
Either	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^enum Either<T, U> {$/;"	g
Element	/home/cht/Rust/robinson/src/dom.rs	/^    Element(ElementData),$/;"	e	enum:NodeType
ElementData	/home/cht/Rust/robinson/src/dom.rs	/^impl ElementData {$/;"	c
ElementData	/home/cht/Rust/robinson/src/dom.rs	/^pub struct ElementData {$/;"	s
Encoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/gif.rs	/^impl<W: Write> Encoder<W> {$/;"	c
Encoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/gif.rs	/^pub struct Encoder<W: Write> {$/;"	s
EncodingDict	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^impl EncodingDict {$/;"	c
EncodingDict	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^struct EncodingDict {$/;"	s
EndOfFile	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    EndOfFile,$/;"	e	enum:RLEInsn
EndOfRow	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    EndOfRow,$/;"	e	enum:RLEInsn
EndianReader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^pub trait EndianReader: Read {$/;"	i
Entry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/ifd.rs	/^impl ::std::fmt::Debug for Entry {$/;"	c
Entry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/ifd.rs	/^impl Entry {$/;"	c
Entry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/ifd.rs	/^pub struct Entry {$/;"	s
EnumeratePixels	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^impl<'a, P: Pixel + 'a> Iterator for EnumeratePixels<'a, P> where P::Subpixel: 'a {$/;"	c
EnumeratePixels	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^pub struct EnumeratePixels<'a, P: Pixel + 'a> where <P as Pixel>::Subpixel: 'a {$/;"	s
EnumeratePixelsMut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^impl<'a, P: Pixel + 'a> Iterator for EnumeratePixelsMut<'a, P> where P::Subpixel: 'a {$/;"	c
EnumeratePixelsMut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^pub struct EnumeratePixelsMut<'a, P: Pixel + 'a> where <P as Pixel>::Subpixel: 'a {$/;"	s
FIX_0_298631336	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/transform.rs	/^static FIX_0_298631336: i32 = 2446;$/;"	v
FIX_0_390180644	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/transform.rs	/^static FIX_0_390180644: i32 = 3196;$/;"	v
FIX_0_541196100	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/transform.rs	/^static FIX_0_541196100: i32 = 4433;$/;"	v
FIX_0_765366865	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/transform.rs	/^static FIX_0_765366865: i32 = 6270;$/;"	v
FIX_0_899976223	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/transform.rs	/^static FIX_0_899976223: i32 = 7373;$/;"	v
FIX_1_175875602	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/transform.rs	/^static FIX_1_175875602: i32 = 9633;$/;"	v
FIX_1_501321110	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/transform.rs	/^static FIX_1_501321110: i32 = 12299;$/;"	v
FIX_1_847759065	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/transform.rs	/^static FIX_1_847759065: i32 = 15137;$/;"	v
FIX_1_961570560	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/transform.rs	/^static FIX_1_961570560: i32 = 16069;$/;"	v
FIX_2_053119869	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/transform.rs	/^static FIX_2_053119869: i32 = 16819;$/;"	v
FIX_2_562915447	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/transform.rs	/^static FIX_2_562915447: i32 = 20995;$/;"	v
FIX_3_072711026	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/transform.rs	/^static FIX_3_072711026: i32 = 25172;$/;"	v
Fail	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^impl Error for Fail {$/;"	c
Fail	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^impl fmt::Display for Fail {$/;"	c
Fail	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^pub enum Fail {$/;"	g
Filter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^pub struct Filter <'a> {$/;"	s
FilterType	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^pub enum FilterType {$/;"	g
FloatingFrees	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    FloatingFrees,$/;"	e	enum:ParsingStyle
Format888	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    Format888$/;"	e	enum:FormatFullBytes
FormatError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    FormatError(String),$/;"	e	enum:ImageError
FormatFullBytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^enum FormatFullBytes {$/;"	g
FormatRGB24	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    FormatRGB24,$/;"	e	enum:FormatFullBytes
FormatRGB32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    FormatRGB32,$/;"	e	enum:FormatFullBytes
FormatRGBA32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    FormatRGBA32,$/;"	e	enum:FormatFullBytes
Frame	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/animation.rs	/^impl Frame {$/;"	c
Frame	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/animation.rs	/^pub struct Frame {$/;"	s
Frame	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^pub struct Frame {$/;"	s
Frames	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/animation.rs	/^impl Frames {$/;"	c
Frames	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/animation.rs	/^impl<'a> Iterator for Frames {$/;"	c
Frames	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/animation.rs	/^pub struct Frames {$/;"	s
FromBottom	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    FromBottom(Rev<ChunksMut<'a, u8>>),$/;"	e	enum:Chunker
FromColor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^pub trait FromColor<Other> {$/;"	i
FromTop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    FromTop(ChunksMut<'a, u8>),$/;"	e	enum:Chunker
GIF	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    GIF,$/;"	e	enum:ImageFormat
Gaussian	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^    Gaussian,$/;"	e	enum:FilterType
GenericImage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^pub trait GenericImage: Sized {$/;"	i
Given	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    Given,$/;"	e	enum:Optval
Gray	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    Gray(u8),$/;"	e	enum:ColorType
GrayA	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    GrayA(u8),$/;"	e	enum:ColorType
GrayAlphaImage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^pub type GrayAlphaImage = ImageBuffer<LumaA<u8>, Vec<u8>>;$/;"	t
GrayImage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^impl GrayImage {$/;"	c
GrayImage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^pub type GrayImage = ImageBuffer<Luma<u8>, Vec<u8>>;$/;"	t
HDR	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    HDR,$/;"	e	enum:ImageFormat
HDRAdapter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^impl<R: BufRead> HDRAdapter<R> {$/;"	c
HDRAdapter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^impl<R: BufRead> ImageDecoder for HDRAdapter<R> {$/;"	c
HDRAdapter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^pub struct HDRAdapter<R: BufRead> {$/;"	s
HDRDecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^impl<R: BufRead> HDRDecoder<R> {$/;"	c
HDRDecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^impl<R: BufRead> IntoIterator for HDRDecoder<R> {$/;"	c
HDRDecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^pub struct HDRDecoder<R> {$/;"	s
HDREncoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^impl<W: Write> HDREncoder<W> {$/;"	c
HDREncoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^pub struct HDREncoder<W: Write> {$/;"	s
HDRImageDecoderIterator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^impl<R: BufRead> ExactSizeIterator for HDRImageDecoderIterator<R> {} $/;"	c
HDRImageDecoderIterator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^impl<R: BufRead> HDRImageDecoderIterator<R> {$/;"	c
HDRImageDecoderIterator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^impl<R: BufRead> Iterator for HDRImageDecoderIterator<R> {$/;"	c
HDRImageDecoderIterator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^pub struct HDRImageDecoderIterator<R: BufRead> {$/;"	s
HDRMetadata	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^impl HDRMetadata {$/;"	c
HDRMetadata	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^pub struct HDRMetadata {$/;"	s
HasArg	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^pub enum HasArg {$/;"	g
Header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^impl Header {$/;"	c
Header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^struct Header {$/;"	s
ICO	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    ICO,$/;"	e	enum:ImageFormat
ICODecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^impl<R: Read + Seek> ICODecoder<R> {$/;"	c
ICODecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^impl<R: Read + Seek> ImageDecoder for ICODecoder<R> {$/;"	c
ICODecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^pub struct ICODecoder<R: Read> {$/;"	s
ICOEncoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/encoder.rs	/^impl<W: Write> ICOEncoder<W> {$/;"	c
ICOEncoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/encoder.rs	/^pub struct ICOEncoder<W: Write> {$/;"	s
ImageBuffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^impl<'a, 'b, Container, FromType: Pixel + 'static, ToType: Pixel + 'static>$/;"	c
ImageBuffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^impl<P, Container> Clone for ImageBuffer<P, Container>$/;"	c
ImageBuffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^impl<P, Container> Deref for ImageBuffer<P, Container>$/;"	c
ImageBuffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^impl<P, Container> DerefMut for ImageBuffer<P, Container>$/;"	c
ImageBuffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^impl<P, Container> GenericImage for ImageBuffer<P, Container>$/;"	c
ImageBuffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^impl<P, Container> ImageBuffer<P, Container>$/;"	c
ImageBuffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^impl<P, Container> Index<(u32, u32)> for ImageBuffer<P, Container>$/;"	c
ImageBuffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^impl<P, Container> IndexMut<(u32, u32)> for ImageBuffer<P, Container>$/;"	c
ImageBuffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^impl<P: Pixel + 'static> ImageBuffer<P, Vec<P::Subpixel>>$/;"	c
ImageBuffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^pub struct ImageBuffer<P: Pixel, Container> {$/;"	s
ImageDecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^pub trait ImageDecoder: Sized {$/;"	i
ImageEnd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    ImageEnd$/;"	e	enum:ImageError
ImageError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/gif.rs	/^impl From<gif::DecodingError> for ImageError {$/;"	c
ImageError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^impl Error for ImageError {$/;"	c
ImageError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^impl From<io::Error> for ImageError {$/;"	c
ImageError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^impl fmt::Display for ImageError {$/;"	c
ImageError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^pub enum ImageError {$/;"	g
ImageError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/decoder.rs	/^impl From<jpeg_decoder::Error> for ImageError {$/;"	c
ImageError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^impl From<png::DecodingError> for ImageError {$/;"	c
ImageFormat	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^pub enum ImageFormat {$/;"	g
ImageLuma8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    ImageLuma8(GrayImage),$/;"	e	enum:DynamicImage
ImageLumaA8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    ImageLumaA8(GrayAlphaImage),$/;"	e	enum:DynamicImage
ImageResult	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^pub type ImageResult<T> = Result<T, ImageError>;$/;"	t
ImageRgb8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    ImageRgb8(RgbImage),$/;"	e	enum:DynamicImage
ImageRgba8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    ImageRgba8(RgbaImage),$/;"	e	enum:DynamicImage
ImageType	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^enum ImageType {$/;"	g
ImageType	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^enum ImageType {$/;"	g
ImageType	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^impl ImageType {$/;"	c
InfoHeader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    InfoHeader,$/;"	e	enum:BMPHeaderType
Inline	/home/cht/Rust/robinson/src/style.rs	/^    Inline,$/;"	e	enum:Display
InlineNode	/home/cht/Rust/robinson/src/layout.rs	/^    InlineNode(&'a StyledNode<'a>),$/;"	e	enum:BoxType
InnerDecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^enum InnerDecoder<R: Read> {$/;"	g
IntoImageError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^trait IntoImageError<T> {$/;"	i
IntoIter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    type IntoIter = HDRImageDecoderIterator<R>;$/;"	t	implementation:HDRDecoder
Invert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^pub trait Invert {$/;"	i
IoError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    IoError(io::Error),$/;"	e	enum:ImageError
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/animation.rs	/^    type Item = Frame;$/;"	t	implementation:Frames
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    type Item = &'a mut [u8];$/;"	t	implementation:RowIterator
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    type Item = RLEInsn;$/;"	t	implementation:RLEInsnIterator
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    type Item = &'a P;$/;"	t
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    type Item = &'a mut P;$/;"	t
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    type Item = (u32, u32, &'a P);$/;"	t
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    type Item = (u32, u32, &'a mut P);$/;"	t
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    type Item = ImageResult<RGBE8Pixel>;$/;"	t	implementation:HDRDecoder
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    type Item = ImageResult<RGBE8Pixel>;$/;"	t	implementation:HDRImageDecoderIterator
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^    type Item = RunOrNot;$/;"	t	implementation:NorunCombineIterator
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^    type Item = RunOrNot;$/;"	t	implementation:RunIterator
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    type Item = (u32, u32, &'a mut I::Pixel);$/;"	t
Item	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    type Item = (u32, u32, I::Pixel);$/;"	t	implementation:Pixels
JPEG	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    JPEG,$/;"	e	enum:ImageFormat
JPEGDecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/decoder.rs	/^impl<R: Read> ImageDecoder for JPEGDecoder<R> {$/;"	c
JPEGDecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/decoder.rs	/^impl<R: Read> JPEGDecoder<R> {$/;"	c
JPEGDecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/decoder.rs	/^pub struct JPEGDecoder<R> {$/;"	s
JPEGEncoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^impl<'a, W: Write> JPEGEncoder<'a, W> {$/;"	c
JPEGEncoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^pub struct JPEGEncoder<'a, W: 'a> {$/;"	s
KEYFRAME_BPRED_MODE_PROBS	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^static KEYFRAME_BPRED_MODE_PROBS: [[[u8; 9]; 10]; 10] = [$/;"	v
KEYFRAME_BPRED_MODE_TREE	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^static KEYFRAME_BPRED_MODE_TREE: [i8; 18] = [$/;"	v
KEYFRAME_UV_MODE_PROBS	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^static KEYFRAME_UV_MODE_PROBS: [Prob; 3] = [142, 114, 183];$/;"	v
KEYFRAME_UV_MODE_TREE	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^static KEYFRAME_UV_MODE_TREE: [i8; 6] = [$/;"	v
KEYFRAME_YMODE_PROBS	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^static KEYFRAME_YMODE_PROBS: [Prob; 4] = [145, 156, 163, 128];$/;"	v
KEYFRAME_YMODE_TREE	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^static KEYFRAME_YMODE_TREE: [i8; 8] = [-B_PRED, 2, 4, 6, -DC_PRED, -V_PRED, -H_PRED, -TM_PRED];$/;"	v
Keyword	/home/cht/Rust/robinson/src/css.rs	/^    Keyword(String),$/;"	e	enum:Value
LOOKUP_TABLE_3_BIT_TO_8_BIT	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^static LOOKUP_TABLE_3_BIT_TO_8_BIT: [u8; 8] = [0, 36, 73, 109, 146, 182, 219, 255];$/;"	v
LOOKUP_TABLE_4_BIT_TO_8_BIT	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^static LOOKUP_TABLE_4_BIT_TO_8_BIT: [u8; 16] = [0, 17, 34, 51, 68, 85, 102, 119, 136, 153, 170, /;"	v
LOOKUP_TABLE_5_BIT_TO_8_BIT	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^static LOOKUP_TABLE_5_BIT_TO_8_BIT: [u8; 32] = [0, 8, 16, 25, 33, 41, 49, 58, 66, 74, 82, 90, 99/;"	v
LOOKUP_TABLE_6_BIT_TO_8_BIT	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^static LOOKUP_TABLE_6_BIT_TO_8_BIT: [u8; 64] = [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 45, 49,/;"	v
LUMADESTINATION	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static LUMADESTINATION: u8 = 0;$/;"	v
LUMAID	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static LUMAID: u8 = 1;$/;"	v
LZWReader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^impl EndianReader for LZWReader {$/;"	c
LZWReader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^impl LZWReader {$/;"	c
LZWReader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^impl Read for LZWReader {$/;"	c
LZWReader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^pub struct LZWReader {$/;"	s
Lanczos3	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^    Lanczos3$/;"	e	enum:FilterType
LayoutBox	/home/cht/Rust/robinson/src/layout.rs	/^impl<'a> LayoutBox<'a> {$/;"	c
LayoutBox	/home/cht/Rust/robinson/src/layout.rs	/^pub struct LayoutBox<'a> {$/;"	s
Left	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/gif.rs	/^    Left(T),$/;"	e	enum:Either
Left	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^    Left(T),$/;"	e	enum:Either
Length	/home/cht/Rust/robinson/src/css.rs	/^    Length(f32, Unit),$/;"	e	enum:Value
List	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/ifd.rs	/^    List(Vec<Value>)$/;"	e	enum:Value
LittleEndian	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^    LittleEndian,$/;"	e	enum:ByteOrder
Long	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    Long(String),$/;"	e	enum:Name
LsbReader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/bitstream.rs	/^impl<R> BitReader for LsbReader<R> where R: Read {$/;"	c
LsbWriter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/bitstream.rs	/^impl<'a, W> BitWriter for LsbWriter<'a, W> where W: Write + 'a  {$/;"	c
Luma	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<LumaA<T>> for Luma<T> {$/;"	c
Luma	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Rgb<T>> for Luma<T> {$/;"	c
Luma	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Rgba<T>> for Luma<T> {$/;"	c
Luma	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^impl<T: Primitive> Blend for Luma<T> {$/;"	c
Luma	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^impl<T: Primitive> Invert for Luma<T> {$/;"	c
LumaA	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Luma<T>> for LumaA<T> {$/;"	c
LumaA	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Rgb<T>> for LumaA<T> {$/;"	c
LumaA	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Rgba<T>> for LumaA<T> {$/;"	c
LumaA	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^impl<T: Primitive> Blend for LumaA<T> {$/;"	c
LumaA	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^impl<T: Primitive> Invert for LumaA<T> {$/;"	c
MAGIC_BYTES	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^static MAGIC_BYTES: [(&'static [u8], ImageFormat); 11] = [$/;"	v
MacroBlock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^impl MacroBlock {$/;"	c
MacroBlock	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^struct MacroBlock {$/;"	s
MatchedRule	/home/cht/Rust/robinson/src/style.rs	/^type MatchedRule<'a> = (Specificity, &'a Rule);$/;"	t
Matches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^impl Matches {$/;"	c
Matches	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^pub struct Matches {$/;"	s
Maybe	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    Maybe,$/;"	e	enum:HasArg
MsbReader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/bitstream.rs	/^impl<R> BitReader for MsbReader<R> where R: Read {$/;"	c
MsbWriter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/bitstream.rs	/^impl<'a, W> BitWriter for MsbWriter<'a, W> where W: Write + 'a  {$/;"	c
Multi	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    Multi,$/;"	e	enum:Occur
MutPixels	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^impl<'a, I: GenericImage + 'a> Iterator for MutPixels<'a, I>$/;"	c
MutPixels	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^pub struct MutPixels<'a, I: 'a> {$/;"	s
Name	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^enum Name {$/;"	g
Name	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^impl Name {$/;"	c
Nearest	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^    Nearest,$/;"	e	enum:FilterType
NeuQuant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/colorops.rs	/^impl ColorMap for nq::NeuQuant {$/;"	c
NeuQuant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^impl NeuQuant {$/;"	c
NeuQuant	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^pub struct NeuQuant {$/;"	s
Neuron	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^type Neuron = Quad<f64>;$/;"	t
No	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    No,$/;"	e	enum:HasArg
NoImageData	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    NoImageData = 0,$/;"	e	enum:ImageType
Node	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^impl Node {$/;"	c
Node	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^struct Node {$/;"	s
Node	/home/cht/Rust/robinson/src/dom.rs	/^pub struct Node {$/;"	s
NodeType	/home/cht/Rust/robinson/src/dom.rs	/^pub enum NodeType {$/;"	g
None	/home/cht/Rust/robinson/src/style.rs	/^    None,$/;"	e	enum:Display
Norun	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^    Norun(usize, usize),$/;"	e	enum:RunOrNot
NorunCombineIterator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^impl<'a> Iterator for NorunCombineIterator<'a> {$/;"	c
NorunCombineIterator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^impl<'a> NorunCombineIterator<'a> {$/;"	c
NorunCombineIterator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^struct NorunCombineIterator<'a> {$/;"	s
NotEnoughData	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    NotEnoughData,$/;"	e	enum:ImageError
Occur	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^pub enum Occur {$/;"	g
Opt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^struct Opt {$/;"	s
OptGroup	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^impl OptGroup {$/;"	c
OptGroup	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^struct OptGroup {$/;"	s
OptionDuplicated	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    OptionDuplicated(String),$/;"	e	enum:Fail
OptionMissing	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    OptionMissing(String),$/;"	e	enum:Fail
Optional	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    Optional,$/;"	e	enum:Occur
Options	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^impl Default for Options {$/;"	c
Options	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^impl Options {$/;"	c
Options	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^pub struct Options {$/;"	s
Optval	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^enum Optval {$/;"	g
Output	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    type Output = P;$/;"	t
PASS1_BITS	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/transform.rs	/^static PASS1_BITS: i32 = 2;$/;"	v
PNG	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^    PNG(PNGDecoder<R>)$/;"	e	enum:InnerDecoder
PNG	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    PNG,$/;"	e	enum:ImageFormat
PNGDecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^impl<R: Read> ImageDecoder for PNGDecoder<R> {$/;"	c
PNGDecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^impl<R: Read> PNGDecoder<R> {$/;"	c
PNGDecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^pub struct PNGDecoder<R: Read> {$/;"	s
PNGEncoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^impl<W: Write> PNGEncoder<W> {$/;"	c
PNGEncoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^pub struct PNGEncoder<W: Write> {$/;"	s
PPM	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    PPM,$/;"	e	enum:ImageFormat
PPMDecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/decoder.rs	/^impl<R: Read> ImageDecoder for PPMDecoder<R> {$/;"	c
PPMDecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/decoder.rs	/^impl<R: Read> PPMDecoder<R> {$/;"	c
PPMDecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/decoder.rs	/^pub struct PPMDecoder<R> {$/;"	s
PPMEncoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/encoder.rs	/^impl<'a, W: Write> PPMEncoder<'a, W> {$/;"	c
PPMEncoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/encoder.rs	/^pub struct PPMEncoder<'a, W: 'a> {$/;"	s
PROB_DCT_CAT	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^static PROB_DCT_CAT: [[Prob; 12]; 6] = [$/;"	v
Palette	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    Palette,$/;"	e	enum:ImageType
Palette	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    Palette(u8),$/;"	e	enum:ColorType
Parser	/home/cht/Rust/robinson/src/css.rs	/^impl Parser {$/;"	c
Parser	/home/cht/Rust/robinson/src/css.rs	/^struct Parser {$/;"	s
Parser	/home/cht/Rust/robinson/src/html.rs	/^impl Parser {$/;"	c
Parser	/home/cht/Rust/robinson/src/html.rs	/^struct Parser {$/;"	s
ParsingStyle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^pub enum ParsingStyle {$/;"	g
Pdf	/home/cht/Rust/robinson/src/pdf.rs	/^impl<'a, W: Write + Seek> Pdf<'a, W> {$/;"	c
Pdf	/home/cht/Rust/robinson/src/pdf.rs	/^struct Pdf<'a, W: 'a + Write + Seek> {$/;"	s
Pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    type Pixel = P;$/;"	t
Pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^pub trait Pixel: Copy + Clone {$/;"	i
Pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    type Pixel = color::Rgba<u8>;$/;"	t	implementation:DynamicImage
Pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    type Pixel = I::Pixel;$/;"	t
Pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    type Pixel: Pixel;$/;"	t	interface:GenericImage
PixelRun	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    PixelRun(u8, u8),$/;"	e	enum:RLEInsn
Pixels	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^impl<'a, P: Pixel + 'a> DoubleEndedIterator for Pixels<'a, P> where P::Subpixel: 'a {$/;"	c
Pixels	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^impl<'a, P: Pixel + 'a> Iterator for Pixels<'a, P> where P::Subpixel: 'a {$/;"	c
Pixels	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^pub struct Pixels<'a, P: Pixel + 'a> where P::Subpixel: 'a {$/;"	s
Pixels	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^impl<'a, I: GenericImage> Iterator for Pixels<'a, I> {$/;"	c
Pixels	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^pub struct Pixels<'a, I: 'a> {$/;"	s
PixelsMut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^impl<'a, P: Pixel + 'a> DoubleEndedIterator for PixelsMut<'a, P> where P::Subpixel: 'a {$/;"	c
PixelsMut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^impl<'a, P: Pixel + 'a> Iterator for PixelsMut<'a, P> where P::Subpixel: 'a {$/;"	c
PixelsMut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^pub struct PixelsMut<'a, P: Pixel + 'a> where P::Subpixel: 'a {$/;"	s
Primitive	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/traits.rs	/^pub trait Primitive: Copy + NumCast + Num + PartialOrd<Self> + Clone + Bounded {$/;"	i
Prob	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^type Prob = u8;$/;"	t
PropertyMap	/home/cht/Rust/robinson/src/style.rs	/^pub type PropertyMap = HashMap<String, Value>;$/;"	t
Px	/home/cht/Rust/robinson/src/css.rs	/^    Px,$/;"	e	enum:Unit
Quad	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^struct Quad<T> {$/;"	s
R5_G5_B5_COLOR_MASK	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^static R5_G5_B5_COLOR_MASK: Bitfields = Bitfields {$/;"	v
RGB	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    RGB(u8),$/;"	e	enum:ColorType
RGB16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    RGB16,$/;"	e	enum:ImageType
RGB24	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    RGB24,$/;"	e	enum:ImageType
RGB32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    RGB32,$/;"	e	enum:ImageType
RGBA	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    RGBA(u8),$/;"	e	enum:ColorType
RGBA32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    RGBA32,$/;"	e	enum:ImageType
RGBE8Pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^impl RGBE8Pixel {$/;"	c
RGBE8Pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^pub struct RGBE8Pixel {$/;"	s
RLE4	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    RLE4,$/;"	e	enum:ImageType
RLE8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    RLE8,$/;"	e	enum:ImageType
RLEInsn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^enum RLEInsn {$/;"	g
RLEInsnIterator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^impl<'a, R: Read> Iterator for RLEInsnIterator<'a, R> {$/;"	c
RLEInsnIterator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^struct RLEInsnIterator<'a, R: 'a + Read> {$/;"	s
RawColorMap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    RawColorMap = 1,$/;"	e	enum:ImageType
RawGrayScale	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    RawGrayScale = 3,$/;"	e	enum:ImageType
RawTrueColor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    RawTrueColor = 2,$/;"	e	enum:ImageType
Rect	/home/cht/Rust/robinson/src/layout.rs	/^impl Rect {$/;"	c
Rect	/home/cht/Rust/robinson/src/layout.rs	/^pub struct Rect {$/;"	s
Req	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    Req,$/;"	e	enum:Occur
Result	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^pub type Result = result::Result<Matches, Fail>;$/;"	t
Result	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^impl<T> IntoImageError<T> for ::std::result::Result<T, ::std::num::ParseFloatError> {$/;"	c
Result	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^impl<T> IntoImageError<T> for ::std::result::Result<T, ::std::num::ParseIntError> {$/;"	c
Rgb	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Luma<T>> for Rgb<T> {$/;"	c
Rgb	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<LumaA<T>> for Rgb<T> {$/;"	c
Rgb	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Rgba<T>> for Rgb<T> {$/;"	c
Rgb	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^impl<T: Primitive> Blend for Rgb<T> {$/;"	c
Rgb	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^impl<T: Primitive> Invert for Rgb<T> {$/;"	c
RgbImage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^pub type RgbImage = ImageBuffer<Rgb<u8>, Vec<u8>>;$/;"	t
Rgba	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Luma<T>> for Rgba<T> {$/;"	c
Rgba	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<LumaA<T>> for Rgba<T> {$/;"	c
Rgba	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^impl<T: Primitive + 'static> FromColor<Rgb<T>> for Rgba<T> {$/;"	c
Rgba	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^impl<T: Primitive> Blend for Rgba<T> {$/;"	c
Rgba	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^impl<T: Primitive> Invert for Rgba<T> {$/;"	c
RgbaImage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^pub type RgbaImage = ImageBuffer<Rgba<u8>, Vec<u8>>;$/;"	t
Right	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/gif.rs	/^    Right(U)$/;"	e	enum:Either
Right	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^    Right(U)$/;"	e	enum:Either
RowIterator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^impl<'a> Iterator for RowIterator<'a> {$/;"	c
RowIterator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^pub struct RowIterator<'a> {$/;"	s
Rule	/home/cht/Rust/robinson/src/css.rs	/^pub struct Rule {$/;"	s
Run	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^    Run(u8, usize),$/;"	e	enum:RunOrNot
RunColorMap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    RunColorMap = 9,$/;"	e	enum:ImageType
RunGrayScale	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    RunGrayScale = 11,$/;"	e	enum:ImageType
RunIterator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^impl<'a> Iterator for RunIterator<'a> {$/;"	c
RunIterator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^impl<'a> RunIterator<'a> {$/;"	c
RunIterator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^struct RunIterator<'a> {$/;"	s
RunOrNot	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^enum RunOrNot {$/;"	g
RunTrueColor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    RunTrueColor = 10,$/;"	e	enum:ImageType
SEGMENT_ID_TREE	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^static SEGMENT_ID_TREE: [i8; 6] = [2, 4, -0, -1, -2, -3];$/;"	v
SOF0	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static SOF0: u8 = 0xC0;$/;"	v
SOI	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static SOI: u8 = 0xD8;$/;"	v
SOS	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static SOS: u8 = 0xDA;$/;"	v
STD_CHROMA_AC_CODE_LENGTHS	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static STD_CHROMA_AC_CODE_LENGTHS: [u8; 16] = [$/;"	v
STD_CHROMA_AC_VALUES	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static STD_CHROMA_AC_VALUES: [u8; 162] = [$/;"	v
STD_CHROMA_DC_CODE_LENGTHS	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static STD_CHROMA_DC_CODE_LENGTHS: [u8; 16] = [$/;"	v
STD_CHROMA_DC_VALUES	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static STD_CHROMA_DC_VALUES: [u8; 12] = [$/;"	v
STD_CHROMA_QTABLE	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static STD_CHROMA_QTABLE: [u8; 64] = [$/;"	v
STD_LUMA_AC_CODE_LENGTHS	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static STD_LUMA_AC_CODE_LENGTHS: [u8; 16] = [$/;"	v
STD_LUMA_AC_VALUES	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static STD_LUMA_AC_VALUES: [u8; 162] = [$/;"	v
STD_LUMA_DC_CODE_LENGTHS	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static STD_LUMA_DC_CODE_LENGTHS: [u8; 16] = [$/;"	v
STD_LUMA_DC_VALUES	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static STD_LUMA_DC_VALUES: [u8; 12] = [$/;"	v
STD_LUMA_QTABLE	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static STD_LUMA_QTABLE: [u8; 64] = [$/;"	v
Segment	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^struct Segment {$/;"	s
Selector	/home/cht/Rust/robinson/src/css.rs	/^impl Selector {$/;"	c
Selector	/home/cht/Rust/robinson/src/css.rs	/^pub enum Selector {$/;"	g
Short	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    Short(char),$/;"	e	enum:Name
Simple	/home/cht/Rust/robinson/src/css.rs	/^    Simple(SimpleSelector),$/;"	e	enum:Selector
SimpleSelector	/home/cht/Rust/robinson/src/css.rs	/^pub struct SimpleSelector {$/;"	s
SmartReader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^impl<R: Read + Seek> Read for SmartReader<R> {$/;"	c
SmartReader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^impl<R: Read + Seek> Seek for SmartReader<R> {$/;"	c
SmartReader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^impl<R> EndianReader for SmartReader<R> where R: Read + Seek {$/;"	c
SmartReader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^impl<R> SmartReader<R> where R: Read + Seek {$/;"	c
SmartReader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^pub struct SmartReader<R> where R: Read + Seek {$/;"	s
SolidColor	/home/cht/Rust/robinson/src/painting.rs	/^    SolidColor(Color, Rect),$/;"	e	enum:DisplayCommand
Specificity	/home/cht/Rust/robinson/src/css.rs	/^pub type Specificity = (usize, usize, usize);$/;"	t
StopAtFirstFree	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    StopAtFirstFree,$/;"	e	enum:ParsingStyle
StyledNode	/home/cht/Rust/robinson/src/style.rs	/^impl<'a> StyledNode<'a> {$/;"	c
StyledNode	/home/cht/Rust/robinson/src/style.rs	/^pub struct StyledNode<'a> {$/;"	s
Stylesheet	/home/cht/Rust/robinson/src/css.rs	/^pub struct Stylesheet {$/;"	s
SubImage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^impl<'a, I: GenericImage + 'static> GenericImage for SubImage<'a, I>$/;"	c
SubImage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^impl<'a, I: GenericImage + 'static> SubImage<'a, I>$/;"	c
SubImage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^pub struct SubImage <'a, I: 'a> {$/;"	s
Subpixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    type Subpixel: Primitive;$/;"	t	interface:Pixel
TGA	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    TGA,$/;"	e	enum:ImageFormat
TGADecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^impl<R: Read + Seek> ImageDecoder for TGADecoder<R> {$/;"	c
TGADecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^impl<R: Read + Seek> TGADecoder<R> {$/;"	c
TGADecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^pub struct TGADecoder<R> {$/;"	s
TIFF	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    TIFF,$/;"	e	enum:ImageFormat
TIFFDecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^impl<R: Read + Seek> ImageDecoder for TIFFDecoder<R> {$/;"	c
TIFFDecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^impl<R: Read + Seek> TIFFDecoder<R> {$/;"	c
TIFFDecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^pub struct TIFFDecoder<R> where R: Read + Seek {$/;"	s
Target	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    type Target = [P::Subpixel];$/;"	t
Text	/home/cht/Rust/robinson/src/dom.rs	/^    Text(String),$/;"	e	enum:NodeType
TokenProbTables	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^type TokenProbTables = [[[[Prob; NUM_DCT_TOKENS - 1]; 3]; 8]; 4];$/;"	t
Triangle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^    Triangle,$/;"	e	enum:FilterType
U16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    U16(&'a mut [u16])$/;"	e	enum:DecodingBuffer
U16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    U16(Vec<u16>)$/;"	e	enum:DecodingResult
U8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    U8(&'a mut [u8]),$/;"	e	enum:DecodingBuffer
U8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    U8(Vec<u8>),$/;"	e	enum:DecodingResult
UNZIGZAG	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^static UNZIGZAG: [u8; 64] = [$/;"	v
UnexpectedArgument	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    UnexpectedArgument(String),$/;"	e	enum:Fail
Unit	/home/cht/Rust/robinson/src/css.rs	/^pub enum Unit {$/;"	g
Unknown	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    Unknown,$/;"	e	enum:ImageType
UnrecognizedOption	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    UnrecognizedOption(String),$/;"	e	enum:Fail
Unsigned	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/ifd.rs	/^    Unsigned(u32),$/;"	e	enum:Value
UnsupportedColor	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    UnsupportedColor(ColorType),$/;"	e	enum:ImageError
UnsupportedError	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    UnsupportedError(String),$/;"	e	enum:ImageError
V2Header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    V2Header,$/;"	e	enum:BMPHeaderType
V3Header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    V3Header,$/;"	e	enum:BMPHeaderType
V4Header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    V4Header,$/;"	e	enum:BMPHeaderType
V5Header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    V5Header,$/;"	e	enum:BMPHeaderType
VP8Decoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^impl<R: Read> VP8Decoder<R> {$/;"	c
VP8Decoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^pub struct VP8Decoder<R> {$/;"	s
Val	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    Val(String),$/;"	e	enum:Optval
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/ifd.rs	/^impl Value {$/;"	c
Value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/ifd.rs	/^pub enum Value {$/;"	g
Value	/home/cht/Rust/robinson/src/css.rs	/^impl Value {$/;"	c
Value	/home/cht/Rust/robinson/src/css.rs	/^pub enum Value {$/;"	g
WEBP	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    WEBP,$/;"	e	enum:ImageFormat
WebpDecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/decoder.rs	/^impl<R: Read> ImageDecoder for WebpDecoder<R> {$/;"	c
WebpDecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/decoder.rs	/^impl<R: Read> WebpDecoder<R> {$/;"	c
WebpDecoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/decoder.rs	/^pub struct WebpDecoder<R> {$/;"	s
Wrapping	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^trait Wrapping {$/;"	i
Yes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    Yes,$/;"	e	enum:HasArg
ZIGZAG	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^static ZIGZAG: [u8; 16] = [0, 1, 4, 8, 5, 2, 3, 6, 9, 12, 13, 10, 7, 11, 14, 15];$/;"	v
_dc_pred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    _dc_pred: i32$/;"	m	struct:Component
_finish	/home/cht/Rust/robinson/src/pdf.rs	/^    fn _finish(&mut self) -> io::Result<()> {$/;"	P	implementation:Pdf
_phantom	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    _phantom: PhantomData<P>,$/;"	m	struct:ImageBuffer
_write_object	/home/cht/Rust/robinson/src/pdf.rs	/^    fn _write_object<F, T>(&mut self, id: usize, write_content: F) -> io::Result<T>$/;"	P	implementation:Pdf
a	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    a: Bitfield,$/;"	m	struct:Bitfields
a	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^    fn a<T>(mut v: Vec<T>, mut other: Vec<T>) -> Vec<T> {$/;"	f	function:noruncombine_test
a	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^    a: T,$/;"	m	struct:Quad
a	/home/cht/Rust/robinson/src/css.rs	/^    pub a: u8,$/;"	m	struct:Color
ac_table	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    ac_table: u8,$/;"	m	struct:Component
accumulator	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    accumulator: u32,$/;"	m	struct:BitWriter
add_alpha_channel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    add_alpha_channel: bool,$/;"	m	struct:BMPDecoder
add_residue	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^fn add_residue(pblock: &mut [u8], rblock: &[i32], y0: usize, x0: usize, stride: usize) {$/;"	f
adjust_contrast	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn adjust_contrast(&self, c: f32) -> DynamicImage {$/;"	P	implementation:DynamicImage
advance	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    fn advance(&mut self) {$/;"	P	implementation:HDRImageDecoderIterator
affine	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/mod.rs	/^mod affine;$/;"	n
aliases	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    aliases: Vec<Opt>,$/;"	m	struct:Opt
alterneigh	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^    fn alterneigh(&mut self, alpha: f64, rad: i32, i: i32, quad: Quad<f64>) {$/;"	P	implementation:NeuQuant
altersingle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^    fn altersingle(&mut self, alpha: f64, i: i32, quad: Quad<f64>) {$/;"	P	implementation:NeuQuant
animation	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/lib.rs	/^mod animation;$/;"	n
apply	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn apply<F>(&mut self, f: F) where F: Fn(Self::Subpixel) -> Self::Subpixel;$/;"	P	interface:Pixel
apply2	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn apply2<F>(&mut self, other: &Self, f: F)$/;"	P	interface:Pixel
apply_with_alpha	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn apply_with_alpha<F, G>(&mut self, f: F, g: G)$/;"	P	interface:Pixel
as_luma8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn as_luma8(& self) -> Option<& GrayImage> {$/;"	P	implementation:DynamicImage
as_luma_alpha8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn as_luma_alpha8(&self) -> Option<& GrayAlphaImage> {$/;"	P	implementation:DynamicImage
as_mut_luma8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn as_mut_luma8(&mut self) -> Option<&mut GrayImage> {$/;"	P	implementation:DynamicImage
as_mut_luma_alpha8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn as_mut_luma_alpha8(&mut self) -> Option<&mut GrayAlphaImage> {$/;"	P	implementation:DynamicImage
as_mut_rgb8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn as_mut_rgb8(&mut self) -> Option<&mut RgbImage> {$/;"	P	implementation:DynamicImage
as_mut_rgba8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn as_mut_rgba8(&mut self) -> Option<&mut RgbaImage> {$/;"	P	implementation:DynamicImage
as_rgb8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn as_rgb8(&self) -> Option<&RgbImage> {$/;"	P	implementation:DynamicImage
as_rgba8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn as_rgba8(&self) -> Option<& RgbaImage> {$/;"	P	implementation:DynamicImage
as_u32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/ifd.rs	/^    pub fn as_u32(self) -> ::image::ImageResult<u32> {$/;"	P	implementation:Value
as_u32_vec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/ifd.rs	/^    pub fn as_u32_vec(self) -> ::image::ImageResult<Vec<u32>> {$/;"	P	implementation:Value
assert_pixels_eq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/affine.rs	/^    macro_rules! assert_pixels_eq {$/;"	M	module:test
attributes	/home/cht/Rust/robinson/src/dom.rs	/^    pub attributes: AttrMap,$/;"	m	struct:ElementData
avg2	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^fn avg2(this: u8, right: u8) -> u8 {$/;"	f
avg3	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^fn avg3(left: u8, this: u8, right: u8) -> u8 {$/;"	f
b	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    b: Bitfield,$/;"	m	struct:Bitfields
b	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^    b: T,$/;"	m	struct:Quad
b	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    b: BoolReader,$/;"	m	struct:VP8Decoder
b	/home/cht/Rust/robinson/src/css.rs	/^    pub b: u8,$/;"	m	struct:Color
bc_cubic_spline	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^fn bc_cubic_spline(x: f32, b: f32, c: f32) -> f32 {$/;"	f
bench	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^mod bench {$/;"	n
bench_conversion	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn bench_conversion(b: &mut test::Bencher) {$/;"	f	module:test
bench_conversion	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    fn bench_conversion(b: &mut test::Bencher) {$/;"	f	module:bench
bench_resize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^    fn bench_resize(b: &mut test::Bencher) {$/;"	f	module:tests
best_entry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^fn best_entry(mut entries: Vec<DirEntry>) -> ImageResult<DirEntry> {$/;"	f
bias	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^    bias: Vec<f64>, \/\/ bias and freq arrays for learning$/;"	m	struct:NeuQuant
bit_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    bit_count: u16,$/;"	m	struct:BMPDecoder
bit_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    bit_count: u8,$/;"	m	struct:BoolReader
bitfields	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    bitfields: Option<Bitfields>,$/;"	m	struct:BMPDecoder
bits_per_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^pub fn bits_per_pixel(c: ColorType) -> usize {$/;"	f
bits_per_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^    bits_per_pixel: u16,$/;"	m	struct:DirEntry
bits_per_sample	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    bits_per_sample: Vec<u8>,$/;"	m	struct:TIFFDecoder
bitstream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/mod.rs	/^pub mod bitstream;$/;"	n
blend	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn blend(&mut self, other: &Self);$/;"	P	interface:Pixel
blend	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn blend(&mut self, other: &Luma<T>) {$/;"	P	implementation:Luma
blend	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn blend(&mut self, other: &LumaA<T>) {$/;"	P	implementation:LumaA
blend	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn blend(&mut self, other: &Rgb<T>) {$/;"	P	implementation:Rgb
blend	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn blend(&mut self, other: &Rgba<T>) {$/;"	P	implementation:Rgba
blend	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn blend(&mut self, other: &Self);$/;"	P	interface:Blend
blend_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn blend_pixel(&mut self, x: u32, y: u32, p: P) {$/;"	f
blend_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    fn blend_pixel(&mut self, x: u32, y: u32, pixel: color::Rgba<u8>) {$/;"	P	implementation:DynamicImage
blend_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn blend_pixel(&mut self, x: u32, y: u32, pixel: I::Pixel) {$/;"	f
blend_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn blend_pixel(&mut self, x: u32, y: u32, pixel: Self::Pixel);$/;"	P	interface:GenericImage
blur	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn blur(&self, sigma: f32) -> DynamicImage {$/;"	P	implementation:DynamicImage
blur	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^pub fn blur<I: GenericImage + 'static>(image: &I, sigma: f32)$/;"	f
bmp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/lib.rs	/^pub mod bmp;$/;"	n
bmp_header_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    bmp_header_type: BMPHeaderType,$/;"	m	struct:BMPDecoder
border	/home/cht/Rust/robinson/src/layout.rs	/^    pub border: EdgeSizes,$/;"	m	struct:Dimensions
border_box	/home/cht/Rust/robinson/src/layout.rs	/^    pub fn border_box(self) -> Rect {$/;"	P	implementation:Dimensions
bottom	/home/cht/Rust/robinson/src/layout.rs	/^    pub bottom: f32,$/;"	m	struct:EdgeSizes
bounds	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn bounds(&self) -> (u32, u32, u32, u32) {$/;"	f
bounds	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    fn bounds(&self) -> (u32, u32, u32, u32) {$/;"	P	implementation:DynamicImage
bounds	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn bounds(&self) -> (u32, u32, u32, u32) {$/;"	f
bounds	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn bounds(&self) -> (u32, u32, u32, u32);$/;"	P	interface:GenericImage
box_kernel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^pub fn box_kernel(x: f32) -> f32 {$/;"	f
box_type	/home/cht/Rust/robinson/src/layout.rs	/^    pub box_type: BoxType<'a>,$/;"	m	struct:LayoutBox
bpred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    bpred:       [i8; 16],$/;"	m	struct:MacroBlock
brighten	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn brighten(&self, value: i32) -> DynamicImage {$/;"	P	implementation:DynamicImage
brighten	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/colorops.rs	/^pub fn brighten<I, P, S>(image: &I, value: i32)$/;"	f
buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    buf: Vec<RGBE8Pixel>, \/\/ scanline buffer$/;"	m	struct:HDRImageDecoderIterator
buf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    buf: Vec<u8>,$/;"	m	struct:BoolReader
buffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/animation.rs	/^    buffer: RgbaImage,$/;"	m	struct:Frame
buffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/animation.rs	/^    pub fn buffer(&self) -> &RgbaImage {$/;"	P	implementation:Frame
buffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/lib.rs	/^mod buffer;$/;"	n
buffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^    buffer: io::Cursor<Vec<u8>>,$/;"	m	struct:LZWReader
buffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    buffer: Vec<u8>,$/;"	m	struct:DecodingDict
buffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    fn buffer(&self) -> &[u8] {$/;"	P	implementation:DecodingDict
build_colormap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^    fn build_colormap(&mut self) {$/;"	P	implementation:NeuQuant
build_display_list	/home/cht/Rust/robinson/src/painting.rs	/^pub fn build_display_list(layout_root: &LayoutBox) -> DisplayList {$/;"	f
build_frame_header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^fn build_frame_header(m: &mut Vec<u8>,$/;"	f
build_huff_lut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/entropy.rs	/^pub fn build_huff_lut(bits: &[u8], huffval: &[u8]) -> Vec<(u8, u16)> {$/;"	f
build_huffman_segment	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^fn build_huffman_segment(m: &mut Vec<u8>,$/;"	f
build_jfif_header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^fn build_jfif_header(m: &mut Vec<u8>) {$/;"	f
build_layout_tree	/home/cht/Rust/robinson/src/layout.rs	/^fn build_layout_tree<'a>(style_node: &'a StyledNode<'a>) -> LayoutBox<'a> {$/;"	f
build_quantization_segment	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^fn build_quantization_segment(m: &mut Vec<u8>,$/;"	f
build_scan_header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^fn build_scan_header(m: &mut Vec<u8>, components: &[Component]) {$/;"	f
byte_order	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    byte_order: ByteOrder,$/;"	m	struct:TIFFDecoder
byte_order	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    pub fn byte_order(&self) -> ByteOrder {$/;"	P	implementation:TIFFDecoder
byte_order	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^    byte_order: ByteOrder$/;"	m	struct:LZWReader
byte_order	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^    fn byte_order(&self) -> ByteOrder {$/;"	P	implementation:LZWReader
byte_order	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^    fn byte_order(&self) -> ByteOrder {$/;"	f
byte_order	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^    fn byte_order(&self) -> ByteOrder;$/;"	P	interface:EndianReader
byte_order	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^    pub byte_order: ByteOrder$/;"	m	struct:SmartReader
bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    bytes: Vec<u8>,$/;"	m	struct:ColorMap
bytes_per_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn bytes_per_color(&self) -> usize {$/;"	P	implementation:BMPDecoder
bytes_per_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    bytes_per_pixel: usize,$/;"	m	struct:TGADecoder
bytes_to_index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^        fn bytes_to_index(bytes: &[u8]) -> usize {$/;"	f	method:TGADecoder::expand_color_map
bytewidth	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/decoder.rs	/^    fn bytewidth(&self) -> u32 {$/;"	P	implementation:PPMDecoder
c	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    pub c: [u8; 3],$/;"	m	struct:RGBE8Pixel
c	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    c: u8,$/;"	m	struct:Node
calculate_block_height	/home/cht/Rust/robinson/src/layout.rs	/^    fn calculate_block_height(&mut self) {$/;"	P	implementation:LayoutBox
calculate_block_position	/home/cht/Rust/robinson/src/layout.rs	/^    fn calculate_block_position(&mut self, containing_block: Dimensions) {$/;"	P	implementation:LayoutBox
calculate_block_width	/home/cht/Rust/robinson/src/layout.rs	/^    fn calculate_block_width(&mut self, containing_block: Dimensions) {$/;"	P	implementation:LayoutBox
catmullrom_kernel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^pub fn catmullrom_kernel(x: f32) -> f32 {$/;"	f
cause	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn cause (&self) -> Option<&Error> {$/;"	P	implementation:ImageError
change_bounds	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    pub fn change_bounds(&mut self, x: u32, y: u32, width: u32, height: u32) {$/;"	f
channel_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn channel_count() -> u8;$/;"	P	interface:Pixel
channels	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn channels(&self) -> &[Self::Subpixel];$/;"	P	interface:Pixel
channels4	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn channels4(&self) -> (Self::Subpixel, Self::Subpixel, Self::Subpixel, Self::Subpixel);$/;"	P	interface:Pixel
channels_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn channels_mut(&mut self) -> &mut [Self::Subpixel];$/;"	P	interface:Pixel
children	/home/cht/Rust/robinson/src/dom.rs	/^    pub children: Vec<Node>,$/;"	m	struct:Node
children	/home/cht/Rust/robinson/src/layout.rs	/^    pub children: Vec<LayoutBox<'a>>,$/;"	m	struct:LayoutBox
children	/home/cht/Rust/robinson/src/style.rs	/^    pub children: Vec<StyledNode<'a>>,$/;"	m	struct:StyledNode
chroma_actable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    chroma_actable: Vec<(u8, u16)>,$/;"	m	struct:JPEGEncoder
chroma_dctable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    chroma_dctable: Vec<(u8, u16)>,$/;"	m	struct:JPEGEncoder
chroma_mode	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    chroma_mode: i8,$/;"	m	struct:MacroBlock
chunks	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    chunks: Chunker<'a>$/;"	m	struct:RowIterator
chunks	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    chunks: Chunks<'a, P::Subpixel>$/;"	m	struct:Pixels
chunks	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    chunks: ChunksMut<'a, P::Subpixel>$/;"	m	struct:PixelsMut
clamp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/utils.rs	/^pub fn clamp<N>(a: N, min: N, max: N) -> N$/;"	f
clamp	/home/cht/Rust/robinson/src/painting.rs	/^    fn clamp(self, lower: Self, upper: Self) -> Self;$/;"	P	interface:Clamp
clamp	/home/cht/Rust/robinson/src/painting.rs	/^    fn clamp(self, lower: f32, upper: f32) -> f32 {$/;"	P	implementation:f32
class	/home/cht/Rust/robinson/src/css.rs	/^    pub class: Vec<String>,$/;"	m	struct:SimpleSelector
classes	/home/cht/Rust/robinson/src/dom.rs	/^    pub fn classes(&self) -> HashSet<&str> {$/;"	P	implementation:ElementData
clear_code	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    fn clear_code(&self) -> Code {$/;"	P	implementation:EncodingDict
clone	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn clone(&self) -> ImageBuffer<P, Container> {$/;"	f
cmyk_to_rgb	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/decoder.rs	/^fn cmyk_to_rgb(input: &[u8]) -> Vec<u8> {$/;"	f
col	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    col: usize, \/\/ current position in scanline$/;"	m	struct:HDRImageDecoderIterator
color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn color(&self) -> color::ColorType {$/;"	P	implementation:DynamicImage
color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/lib.rs	/^mod color;$/;"	n
color_correction	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    pub color_correction: Option<(f32,f32,f32)>,$/;"	m	struct:HDRMetadata
color_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^    color_count: u8,$/;"	m	struct:DirEntry
color_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    color_map: Option<ColorMap>,$/;"	m	struct:TGADecoder
color_model	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn color_model() -> &'static str;$/;"	P	interface:Pixel
color_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn color_type() -> ColorType;$/;"	P	interface:Pixel
color_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    color_type: ColorType,$/;"	m	struct:TGADecoder
colormap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^    colormap: Vec<Color>,$/;"	m	struct:NeuQuant
colorops	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/mod.rs	/^pub mod colorops;$/;"	n
colors_used	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    colors_used: u32,$/;"	m	struct:BMPDecoder
colortype	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn colortype(&mut self) -> ImageResult<ColorType> {$/;"	P	implementation:BMPDecoder
colortype	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/gif.rs	/^    fn colortype(&mut self) -> ImageResult<color::ColorType> {$/;"	P	implementation:Decoder
colortype	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    fn colortype(&mut self) -> ImageResult<ColorType> {$/;"	P	implementation:HDRAdapter
colortype	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^    fn colortype(&mut self) -> ImageResult<ColorType> {$/;"	P	implementation:ICODecoder
colortype	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn colortype(&mut self) -> ImageResult<ColorType>;$/;"	P	interface:ImageDecoder
colortype	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/decoder.rs	/^    fn colortype(&mut self) -> ImageResult<ColorType> {$/;"	P	implementation:JPEGDecoder
colortype	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^    fn colortype(&mut self) -> ImageResult<ColorType> {$/;"	P	implementation:PNGDecoder
colortype	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/decoder.rs	/^    fn colortype(&mut self) -> ImageResult<ColorType> {$/;"	P	implementation:PPMDecoder
colortype	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    fn colortype(&mut self) -> ImageResult<ColorType> {$/;"	P	implementation:TGADecoder
colortype	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    fn colortype(&mut self) -> ImageResult<ColorType> {$/;"	P	implementation:TIFFDecoder
colortype	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/decoder.rs	/^    fn colortype(&mut self) -> ImageResult<color::ColorType> {$/;"	P	implementation:WebpDecoder
complexity	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    complexity:  [u8; 9],$/;"	m	struct:MacroBlock
components	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    components: Vec<Component>,$/;"	m	struct:JPEGEncoder
compression_method	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    compression_method: CompressionMethod$/;"	m	struct:TIFFDecoder
consume_char	/home/cht/Rust/robinson/src/css.rs	/^    fn consume_char(&mut self) -> char {$/;"	P	implementation:Parser
consume_char	/home/cht/Rust/robinson/src/html.rs	/^    fn consume_char(&mut self) -> char {$/;"	P	implementation:Parser
consume_while	/home/cht/Rust/robinson/src/css.rs	/^    fn consume_while<F>(&mut self, test: F) -> String$/;"	P	implementation:Parser
consume_while	/home/cht/Rust/robinson/src/html.rs	/^    fn consume_while<F>(&mut self, test: F) -> String$/;"	P	implementation:Parser
consume_whitespace	/home/cht/Rust/robinson/src/css.rs	/^    fn consume_whitespace(&mut self) {$/;"	P	implementation:Parser
consume_whitespace	/home/cht/Rust/robinson/src/html.rs	/^    fn consume_whitespace(&mut self) {$/;"	P	implementation:Parser
content	/home/cht/Rust/robinson/src/layout.rs	/^    pub content: Rect,$/;"	m	struct:Dimensions
contest	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^    fn contest (&mut self, b: f64, g: f64, r: f64, a: f64) -> i32 {$/;"	P	implementation:NeuQuant
contrast	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/colorops.rs	/^pub fn contrast<I, P, S>(image: &I, contrast: f32)$/;"	f
convert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn convert(&self) -> ImageBuffer<ToType, Vec<ToType::Subpixel>> {$/;"	f
convert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn convert(&self) -> T;$/;"	P	interface:ConvertBuffer
copy_from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn copy_from<O>(&mut self, other: &O, x: u32, y:u32) -> bool$/;"	P	interface:GenericImage
copy_memory	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/lib.rs	/^fn copy_memory(src: &[u8], mut dst: &mut [u8]) {$/;"	f
count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/ifd.rs	/^    count: u32,$/;"	m	struct:Entry
create_border	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^fn create_border(mbx: usize, mby: usize, mbw: usize, top: &[u8], left: &[u8]) -> [u8; 357] {$/;"	f
create_pixel_data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn create_pixel_data(&self) -> Vec<u8> {$/;"	P	implementation:BMPDecoder
crop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn crop(&mut self,$/;"	P	implementation:DynamicImage
crop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/mod.rs	/^pub fn crop<I: GenericImage + 'static>(image: &mut I, x: u32, y: u32,$/;"	f
css	/home/cht/Rust/robinson/src/main.rs	/^pub mod css;$/;"	n
curidx	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^    curidx: usize,$/;"	m	struct:RunIterator
current_frame	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/animation.rs	/^    current_frame: usize,$/;"	m	struct:Frames
custom_attributes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    pub custom_attributes: Vec<(String, String)>,    $/;"	m	struct:HDRMetadata
data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    data: Container,$/;"	m	struct:ImageBuffer
data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^    data: &'a [u8],$/;"	m	struct:RunIterator
data_offset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    data_offset: u64,$/;"	m	struct:BMPDecoder
dc_table	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    dc_table: u8,$/;"	m	struct:Component
declarations	/home/cht/Rust/robinson/src/css.rs	/^    pub declarations: Vec<Declaration>,$/;"	m	struct:Rule
decode_component	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^fn decode_component<R: BufRead, S: FnMut(usize, u8)>(r: &mut R, width: usize, mut set_component:/;"	f
decode_frame	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    pub fn decode_frame(&mut self) -> io::Result<&Frame> {$/;"	P	implementation:VP8Decoder
decode_old_rle	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^fn decode_old_rle<R: BufRead>(r: &mut R, fb: RGBE8Pixel, buf: &mut [RGBE8Pixel]) -> ImageResult</;"	f
decoded_rows	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/decoder.rs	/^    decoded_rows: u32,$/;"	m	struct:WebpDecoder
decoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/mod.rs	/^mod decoder;$/;"	n
decoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^    fn decoder<R: Read + Seek>(&self, mut r: R) -> ImageResult<InnerDecoder<R>> {$/;"	P	implementation:DirEntry
decoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/mod.rs	/^mod decoder;$/;"	n
decoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/decoder.rs	/^    decoder: jpeg_decoder::Decoder<R>,$/;"	m	struct:JPEGDecoder
decoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/mod.rs	/^mod decoder;$/;"	n
decoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/mod.rs	/^mod decoder;$/;"	n
decoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/mod.rs	/^mod decoder;$/;"	n
decoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/mod.rs	/^mod decoder;$/;"	n
decoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/mod.rs	/^mod decoder;$/;"	n
decoder_to_image	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^pub fn decoder_to_image<I: ImageDecoder>(codec: I) -> ImageResult<DynamicImage> {$/;"	f
default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    fn default() -> Self {$/;"	P	implementation:Options
define_bit_readers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/bitstream.rs	/^macro_rules! define_bit_readers {$/;"	M
define_bit_writers	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/bitstream.rs	/^macro_rules! define_bit_writers {$/;"	M
define_colors	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^macro_rules! define_colors {$/;"	M
define_decoder_function	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^macro_rules! define_decoder_function {$/;"	M
delay	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/animation.rs	/^    delay: Ratio<u16>,$/;"	m	struct:Frame
delay	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/animation.rs	/^    pub fn delay(&self) -> Ratio<u16> {$/;"	P	implementation:Frame
delta_values	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    delta_values: bool,$/;"	m	struct:Segment
deref	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn deref<'a>(&'a self) -> &'a <Self as Deref>::Target {$/;"	f
deref_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn deref_mut<'a>(&'a mut self) -> &'a mut <Self as Deref>::Target {$/;"	f
derive_codes_and_sizes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/entropy.rs	/^fn derive_codes_and_sizes(bits: &[u8]) -> (Vec<u8>, Vec<u16>) {$/;"	f
desc	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    desc: String,$/;"	m	struct:OptGroup
description	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:Fail
description	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn description (&self) -> &str {$/;"	P	implementation:ImageError
dimensions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn dimensions(&mut self) -> ImageResult<(u32, u32)> {$/;"	P	implementation:BMPDecoder
dimensions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn dimensions(&self) -> (u32, u32) {$/;"	f
dimensions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    pub fn dimensions(&self) -> (u32, u32) {$/;"	f
dimensions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    fn dimensions(&self) -> (u32, u32) {$/;"	P	implementation:DynamicImage
dimensions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/gif.rs	/^    fn dimensions(&mut self) -> ImageResult<(u32, u32)> {$/;"	P	implementation:Decoder
dimensions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    fn dimensions(&mut self) -> ImageResult<(u32, u32)> {$/;"	P	implementation:HDRAdapter
dimensions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^    fn dimensions(&mut self) -> ImageResult<(u32, u32)> {$/;"	P	implementation:ICODecoder
dimensions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn dimensions(&mut self) -> ImageResult<(u32, u32)>;$/;"	P	interface:ImageDecoder
dimensions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn dimensions(&self) -> (u32, u32) {$/;"	f
dimensions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn dimensions(&self) -> (u32, u32);$/;"	P	interface:GenericImage
dimensions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/decoder.rs	/^    fn dimensions(&mut self) -> ImageResult<(u32, u32)> {$/;"	P	implementation:JPEGDecoder
dimensions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^    fn dimensions(&mut self) -> ImageResult<(u32, u32)> {$/;"	P	implementation:PNGDecoder
dimensions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/decoder.rs	/^    fn dimensions(&mut self) -> ImageResult<(u32, u32)> {$/;"	P	implementation:PPMDecoder
dimensions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    fn dimensions(&mut self) -> ImageResult<(u32, u32)> {$/;"	P	implementation:TGADecoder
dimensions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    fn dimensions(&mut self) -> ImageResult<(u32, u32)> {$/;"	P	implementation:TIFFDecoder
dimensions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/decoder.rs	/^    fn dimensions(&mut self) -> ImageResult<(u32, u32)> {$/;"	P	implementation:WebpDecoder
dimensions	/home/cht/Rust/robinson/src/layout.rs	/^    pub dimensions: Dimensions,$/;"	m	struct:LayoutBox
display	/home/cht/Rust/robinson/src/style.rs	/^    pub fn display(&self) -> Display {$/;"	P	implementation:StyledNode
dither	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/colorops.rs	/^pub fn dither<Pix, Map>(image: &mut ImageBuffer<Pix, Vec<u8>>, color_map: &Map)$/;"	f
do_dithering	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/colorops.rs	/^macro_rules! do_dithering($/;"	M
dom	/home/cht/Rust/robinson/src/main.rs	/^pub mod dom;$/;"	n
dynamic_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^macro_rules! dynamic_map($/;"	M
dynimage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/lib.rs	/^mod dynimage;$/;"	n
e	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    pub e: u8,$/;"	m	struct:RGBE8Pixel
each_split_within	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^fn each_split_within(desc: &str, lim: usize) -> Vec<String> {$/;"	f
edge_pixels	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^fn edge_pixels(a: &[u8],$/;"	f
elem	/home/cht/Rust/robinson/src/dom.rs	/^pub fn elem(name: String, attrs: AttrMap, children: Vec<Node>) -> Node {$/;"	f
encode	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/encoder.rs	/^    pub fn encode(&mut self,$/;"	P	implementation:BMPEncoder
encode	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/gif.rs	/^    pub fn encode(self, frame: Frame) -> ImageResult<()> {$/;"	P	implementation:Encoder
encode	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^    pub fn encode(mut self, data: &[Rgb<f32>], width: usize, height: usize) -> Result<()> {$/;"	P	implementation:HDREncoder
encode	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/encoder.rs	/^    pub fn encode(mut self, data: &[u8], width: u32, height: u32,$/;"	P	implementation:ICOEncoder
encode	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    pub fn encode(&mut self,$/;"	P	implementation:JPEGEncoder
encode	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^    pub fn encode(self, data: &[u8], width: u32, height: u32, color: ColorType) -> io::Result<()/;"	P	implementation:PNGEncoder
encode	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/encoder.rs	/^    pub fn encode(&mut self, im: &[u8], width: u32, height: u32, color: color::ColorType) -> io:/;"	P	implementation:PPMEncoder
encode	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^pub fn encode<R, W>(r: R, mut w: W, min_code_size: u8) -> io::Result<()>$/;"	f
encode_coefficient	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^fn encode_coefficient(coefficient: i32) -> (u8, u16) {$/;"	f
encode_gray	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/encoder.rs	/^    fn encode_gray(&mut self, image: &[u8], width: u32, height: u32, row_pad_size: u32, bytes_pe/;"	P	implementation:BMPEncoder
encode_gray	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    fn encode_gray(&mut self, image: &[u8], width: usize, height: usize, bpp: usize) -> io::Resu/;"	P	implementation:JPEGEncoder
encode_rgb	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/encoder.rs	/^    fn encode_rgb(&mut self, image: &[u8], width: u32, height: u32, row_pad_size: u32, bytes_per/;"	P	implementation:BMPEncoder
encode_rgb	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    fn encode_rgb(&mut self, image: &[u8], width: usize, height: usize, bpp: usize) -> io::Resul/;"	P	implementation:JPEGEncoder
encoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/mod.rs	/^mod encoder;$/;"	n
encoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/mod.rs	/^mod encoder;$/;"	n
encoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/mod.rs	/^mod encoder;$/;"	n
encoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/mod.rs	/^mod encoder;$/;"	n
end_code	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    fn end_code(&self) -> Code {$/;"	P	implementation:EncodingDict
entropy	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/mod.rs	/^mod entropy;$/;"	n
entry_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    entry_size: usize,$/;"	m	struct:ColorMap
enumerate_pixels	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    pub fn enumerate_pixels<'a>(&'a self) -> EnumeratePixels<'a, P> {$/;"	f
enumerate_pixels_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    pub fn enumerate_pixels_mut<'a>(&'a mut self) -> EnumeratePixelsMut<'a, P> {$/;"	f
eof	/home/cht/Rust/robinson/src/css.rs	/^    fn eof(&self) -> bool {$/;"	P	implementation:Parser
eof	/home/cht/Rust/robinson/src/html.rs	/^    fn eof(&self) -> bool {$/;"	P	implementation:Parser
error_encountered	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    error_encountered: bool,$/;"	m	struct:HDRImageDecoderIterator
expand_color_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    fn expand_color_map(&mut self, pixel_data: Vec<u8>) -> Vec<u8> {$/;"	P	implementation:TGADecoder
expand_packed	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/mod.rs	/^pub fn expand_packed<F>(buf: &mut [u8], channels: usize, bit_depth: u8, func: F)$/;"	f
expand_palette	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    pub fn expand_palette(self,$/;"	P	implementation:GrayImage
expand_strip	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    fn expand_strip<'a>(&mut self, buffer: DecodingBuffer<'a>, offset: u32, length: u32) -> Imag/;"	P	implementation:TIFFDecoder
expanded_by	/home/cht/Rust/robinson/src/layout.rs	/^    pub fn expanded_by(self, edge: EdgeSizes) -> Rect {$/;"	P	implementation:Rect
exposure	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    pub exposure: Option<f32>,$/;"	m	struct:HDRMetadata
f32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/traits.rs	/^impl Primitive for f32 {$/;"	c
f32	/home/cht/Rust/robinson/src/painting.rs	/^impl Clamp for f32 {$/;"	c
f64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/traits.rs	/^impl Primitive for f64 {$/;"	c
fdct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/transform.rs	/^pub fn fdct(samples: &[u8], coeffs: &mut [i32]) {$/;"	f
filter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    filter: u8,$/;"	m	struct:Frame
filter3x3	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn filter3x3(&self, kernel: &[f32]) -> DynamicImage {$/;"	P	implementation:DynamicImage
filter3x3	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^pub fn filter3x3<I, P, S>(image: &I, kernel: &[f32])$/;"	f
filter_level	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    filter_level: u8,$/;"	m	struct:Frame
find_opt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^fn find_opt(opts: &[Opt], nm: &Name) -> Option<usize> {$/;"	f
find_tag	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    fn find_tag(&mut self, tag: ifd::Tag) -> ImageResult<Option<ifd::Value>> {$/;"	P	implementation:TIFFDecoder
find_tag_u32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    fn find_tag_u32(&mut self, tag: ifd::Tag) -> ImageResult<Option<u32>> {$/;"	P	implementation:TIFFDecoder
find_tag_u32_vec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    fn find_tag_u32_vec(&mut self, tag: ifd::Tag) -> ImageResult<Option<Vec<u32>>> {$/;"	P	implementation:TIFFDecoder
finish	/home/cht/Rust/robinson/src/pdf.rs	/^    fn finish(mut self) -> io::Result<()> {$/;"	P	implementation:Pdf
flip_horizontal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/affine.rs	/^pub fn flip_horizontal<I: GenericImage + 'static>(image:  &I)$/;"	f
flip_vertical	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/affine.rs	/^pub fn flip_vertical<I: GenericImage + 'static>(image:  &I)$/;"	f
fliph	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn fliph(&self) -> DynamicImage {$/;"	P	implementation:DynamicImage
flipv	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn flipv(&self) -> DynamicImage {$/;"	P	implementation:DynamicImage
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:Fail
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter) -> Result<(), fmt::Error> {$/;"	P	implementation:ImageError
fmt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/ifd.rs	/^    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> Result<(), ::std::fmt::Error> {$/;"	P	implementation:Entry
for_display	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    pub for_display: bool,$/;"	m	struct:Frame
format_option	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^fn format_option(opt: &OptGroup) -> String {$/;"	f
frame	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/decoder.rs	/^    frame: Frame,$/;"	m	struct:WebpDecoder
frame	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    frame: Frame,$/;"	m	struct:VP8Decoder
frames	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/animation.rs	/^    frames: Vec<Frame>,$/;"	m	struct:Frames
free	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub free: Vec<String>,$/;"	m	struct:Matches
freq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^    freq: Vec<f64>,$/;"	m	struct:NeuQuant
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/gif.rs	/^    fn from(err: gif::DecodingError) -> ImageError {$/;"	P	implementation:ImageError
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn from(err: io::Error) -> ImageError {$/;"	P	implementation:ImageError
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/decoder.rs	/^    fn from(err: jpeg_decoder::Error) -> ImageError {$/;"	P	implementation:ImageError
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/decoder.rs	/^    fn from(pixel_format: jpeg_decoder::PixelFormat) -> ColorType {$/;"	P	implementation:ColorType
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^    fn from((ct, bits): (png::ColorType, png::BitDepth)) -> ColorType {$/;"	P	implementation:ColorType
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^    fn from(ct: ColorType) -> (png::ColorType, png::BitDepth) {$/;"	P	implementation:BitDepth
from	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^    fn from(err: png::DecodingError) -> ImageError {$/;"	P	implementation:ImageError
from_channels	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn from_channels(a: Self::Subpixel, b: Self::Subpixel, c: Self::Subpixel, d: Self::Subpixel)/;"	P	interface:Pixel
from_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn from_color(&mut self, &Other);$/;"	P	interface:FromColor
from_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn from_color(&mut self, gray: &Luma<T>) {$/;"	P	implementation:Rgb
from_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn from_color(&mut self, gray: &Luma<T>) {$/;"	P	implementation:Rgba
from_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn from_color(&mut self, other: &A) {$/;"	P	implementation:A
from_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn from_color(&mut self, other: &Luma<T>) {$/;"	P	implementation:LumaA
from_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn from_color(&mut self, other: &LumaA<T>) {$/;"	P	implementation:Luma
from_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn from_color(&mut self, other: &LumaA<T>) {$/;"	P	implementation:Rgb
from_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn from_color(&mut self, other: &LumaA<T>) {$/;"	P	implementation:Rgba
from_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn from_color(&mut self, other: &Rgb<T>) {$/;"	P	implementation:Luma
from_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn from_color(&mut self, other: &Rgb<T>) {$/;"	P	implementation:LumaA
from_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn from_color(&mut self, other: &Rgb<T>) {$/;"	P	implementation:Rgba
from_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn from_color(&mut self, other: &Rgba<T>) {$/;"	P	implementation:Luma
from_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn from_color(&mut self, other: &Rgba<T>) {$/;"	P	implementation:LumaA
from_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn from_color(&mut self, other: &Rgba<T>) {$/;"	P	implementation:Rgb
from_fn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    pub fn from_fn<F>(width: u32, height: u32, f: F)$/;"	f
from_mask	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn from_mask(mask: u32, max_len: u32) -> ImageResult<Bitfield> {$/;"	P	implementation:Bitfield
from_mask	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn from_mask(r_mask: u32, g_mask: u32, b_mask: u32, a_mask: u32, max_len: u32) -> ImageResul/;"	P	implementation:Bitfields
from_parts	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/animation.rs	/^    pub fn from_parts(buffer: RgbaImage, left: u32, top: u32, delay: Ratio<u16>) -> Frame {$/;"	P	implementation:Frame
from_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    pub fn from_pixel(width: u32, height: u32, pixel: P)$/;"	f
from_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    pub fn from_raw(width: u32, height: u32, buf: Container)$/;"	f
from_reader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    fn from_reader(r: &mut Read) -> ImageResult<Header> {$/;"	P	implementation:Header
from_reader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    pub fn from_reader(r: &mut Read,$/;"	P	implementation:ColorMap
from_slice	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn from_slice<'a>(slice: &'a [Self::Subpixel]) -> &'a Self;$/;"	P	interface:Pixel
from_slice_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn from_slice_mut<'a>(slice: &'a mut [Self::Subpixel]) -> &'a mut Self;$/;"	P	interface:Pixel
from_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    fn from_str(nm: &str) -> Name {$/;"	P	implementation:Name
from_vec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    pub fn from_vec(width: u32, height: u32, buf: Vec<P::Subpixel>)$/;"	f
g	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    g: Bitfield,$/;"	m	struct:Bitfields
g	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^    g: T,$/;"	m	struct:Quad
g	/home/cht/Rust/robinson/src/css.rs	/^    pub g: u8,$/;"	m	struct:Color
gaussian	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^pub fn gaussian(x: f32, r: f32) -> f32 {$/;"	f
gaussian_kernel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^pub fn gaussian_kernel(x: f32) -> f32 {$/;"	f
get	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    pub fn get(&self, index: usize) -> &[u8] {$/;"	P	implementation:ColorMap
get_color	/home/cht/Rust/robinson/src/painting.rs	/^fn get_color(layout_box: &LayoutBox, name: &str) -> Option<Color> {$/;"	f
get_inline_container	/home/cht/Rust/robinson/src/layout.rs	/^    fn get_inline_container(&mut self) -> &mut LayoutBox<'a> {$/;"	P	implementation:LayoutBox
get_palette_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn get_palette_size(&mut self) -> ImageResult<usize> {$/;"	P	implementation:BMPDecoder
get_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn get_pixel(&self, x: u32, y: u32) -> P {$/;"	f
get_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    pub fn get_pixel(&self, x: u32, y: u32) -> &P {$/;"	f
get_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    fn get_pixel(&self, x: u32, y: u32) -> color::Rgba<u8> {$/;"	P	implementation:DynamicImage
get_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn get_pixel(&self, x: u32, y: u32) -> I::Pixel {$/;"	f
get_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn get_pixel(&self, x: u32, y: u32) -> Self::Pixel;$/;"	P	interface:GenericImage
get_pixel_info	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/encoder.rs	/^fn get_pixel_info(c: &color::ColorType) -> io::Result<(u32, u32, u32)> {$/;"	f
get_pixel_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn get_pixel_mut(&mut self, x: u32, y: u32) -> &mut P {$/;"	f
get_pixel_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    pub fn get_pixel_mut(&mut self, x: u32, y: u32) -> &mut P {$/;"	f
get_pixel_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    fn get_pixel_mut(&mut self, _: u32, _: u32) -> &mut color::Rgba<u8> {$/;"	P	implementation:DynamicImage
get_pixel_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn get_pixel_mut(&mut self, x: u32, y: u32) -> &mut I::Pixel {$/;"	f
get_pixel_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn get_pixel_mut(&mut self, x: u32, y: u32) -> &mut Self::Pixel;$/;"	P	interface:GenericImage
get_reader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/gif.rs	/^    fn get_reader(&mut self) -> Result<&mut gif::Reader<R>, gif::DecodingError> {$/;"	P	implementation:Decoder
get_reader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^    fn get_reader(&mut self) -> Result<&mut png::Reader<R>, png::DecodingError> {$/;"	P	implementation:PNGDecoder
get_style_node	/home/cht/Rust/robinson/src/layout.rs	/^    fn get_style_node(&self) -> &'a StyledNode<'a> {$/;"	P	implementation:LayoutBox
get_tag	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    fn get_tag(&mut self, tag: ifd::Tag) -> ImageResult<ifd::Value> {$/;"	P	implementation:TIFFDecoder
get_tag_u32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    fn get_tag_u32(&mut self, tag: ifd::Tag) -> ImageResult<u32> {$/;"	P	implementation:TIFFDecoder
get_tag_u32_vec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    fn get_tag_u32_vec(&mut self, tag: ifd::Tag) -> ImageResult<Vec<u32>> {$/;"	P	implementation:TIFFDecoder
get_unsupported_error_message	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/encoder.rs	/^fn get_unsupported_error_message(c: &color::ColorType) -> String {$/;"	f
gif	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/lib.rs	/^pub mod gif;$/;"	n
goto_offset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    pub fn goto_offset(&mut self, offset: u32) -> io::Result<()> {$/;"	P	implementation:TIFFDecoder
grayscale	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn grayscale(&self) -> DynamicImage {$/;"	P	implementation:DynamicImage
grayscale	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/colorops.rs	/^pub fn grayscale<'a, I: GenericImage>(image: &I)$/;"	f
grps	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    grps: Vec<OptGroup>,$/;"	m	struct:Options
guess_format	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^pub fn guess_format(buffer: &[u8]) -> ImageResult<ImageFormat> {$/;"	f
h	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    h: u8,$/;"	m	struct:Component
has_loaded_metadata	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    has_loaded_metadata: bool,$/;"	m	struct:BMPDecoder
has_loaded_metadata	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    has_loaded_metadata: bool,$/;"	m	struct:TGADecoder
hasarg	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    hasarg: HasArg,$/;"	m	struct:Opt
hasarg	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    hasarg: HasArg,$/;"	m	struct:OptGroup
have_frame	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/decoder.rs	/^    have_frame: bool,$/;"	m	struct:WebpDecoder
hdr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/lib.rs	/^pub mod hdr;$/;"	n
hdr_decoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/mod.rs	/^mod hdr_decoder;$/;"	n
hdr_encoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/mod.rs	/^mod hdr_encoder;$/;"	n
header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    header: Header,$/;"	m	struct:TGADecoder
height	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    height: i32,$/;"	m	struct:BMPDecoder
height	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    height: u32,$/;"	m	struct:ImageBuffer
height	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    pub fn height(&self) -> u32 {$/;"	f
height	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    height: u32,$/;"	m	struct:HDRDecoder
height	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    pub height: u32,$/;"	m	struct:HDRMetadata
height	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^    height: u8,$/;"	m	struct:DirEntry
height	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn height(&self) -> u32 {$/;"	P	interface:GenericImage
height	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    height: u32$/;"	m	struct:MutPixels
height	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    height: u32$/;"	m	struct:Pixels
height	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/decoder.rs	/^    height: u32,$/;"	m	struct:PPMDecoder
height	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    height: usize,$/;"	m	struct:TGADecoder
height	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    height: u32,$/;"	m	struct:TIFFDecoder
height	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    pub height: u16,$/;"	m	struct:Frame
height	/home/cht/Rust/robinson/src/layout.rs	/^    pub height: f32,$/;"	m	struct:Rect
height	/home/cht/Rust/robinson/src/painting.rs	/^    pub height: usize,$/;"	m	struct:Canvas
hint	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    hint: String,$/;"	m	struct:OptGroup
horizontal_sample	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^fn horizontal_sample<I, P, S>(image: &I, new_width: u32,$/;"	f
html	/home/cht/Rust/robinson/src/main.rs	/^pub mod html;$/;"	n
huerotate	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn huerotate(&self, value: i32) -> DynamicImage {$/;"	P	implementation:DynamicImage
huerotate	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/colorops.rs	/^pub fn huerotate<I, P, S>(image: &I, value: i32)$/;"	f
huffman_encode	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    fn huffman_encode(&mut self, val: u8, table: &[(u8, u16)]) -> io::Result<()> {$/;"	P	implementation:BitWriter
i16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/traits.rs	/^impl Primitive for i16 {$/;"	c
i32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/traits.rs	/^impl Primitive for i32 {$/;"	c
i64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/traits.rs	/^impl Primitive for i64 {$/;"	c
i8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/traits.rs	/^impl Primitive for i8 {$/;"	c
ico	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/lib.rs	/^pub mod ico;$/;"	n
id	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    id: u8,$/;"	m	struct:Component
id	/home/cht/Rust/robinson/src/css.rs	/^    pub id: Option<String>,$/;"	m	struct:SimpleSelector
id	/home/cht/Rust/robinson/src/dom.rs	/^    pub fn id(&self) -> Option<&String> {$/;"	P	implementation:ElementData
id_length	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    id_length: u8,         \/\/ length of ID string$/;"	m	struct:Header
idct4x4	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/transform.rs	/^pub fn idct4x4(block: &mut [i32]) {$/;"	f
ifd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    ifd: Option<Directory>,$/;"	m	struct:TIFFDecoder
ifd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^mod ifd;$/;"	n
image	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    image:   &'a mut I,$/;"	m	struct:SubImage
image	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    image:  &'a I,$/;"	m	struct:Pixels
image	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    image:  &'a mut I,$/;"	m	struct:MutPixels
image	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/lib.rs	/^mod image;$/;"	n
image_desc	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    image_desc: u8,        \/\/ image descriptor$/;"	m	struct:Header
image_height	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    image_height: u16,     \/\/ height of image$/;"	m	struct:Header
image_length	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^    image_length: u32,$/;"	m	struct:DirEntry
image_offset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^    image_offset: u32,$/;"	m	struct:DirEntry
image_to_bytes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^fn image_to_bytes(image: &DynamicImage) -> Vec<u8> {$/;"	f
image_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    image_type: ImageType,$/;"	m	struct:BMPDecoder
image_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    image_type: ImageType,$/;"	m	struct:RLEInsnIterator
image_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    image_type: ImageType,$/;"	m	struct:TGADecoder
image_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    image_type: u8,        \/\/ image type code$/;"	m	struct:Header
image_width	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    image_width: u16,      \/\/ width of image$/;"	m	struct:Header
imageops	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/lib.rs	/^pub mod imageops;$/;"	n
in_bounds	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn in_bounds(&self, x: u32, y: u32) -> bool {$/;"	P	interface:GenericImage
index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn index(&self, (x, y): (u32, u32)) -> &P {$/;"	f
index	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    index: usize,$/;"	m	struct:BoolReader
index_colors	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/colorops.rs	/^pub fn index_colors<Pix, Map>(image: &ImageBuffer<Pix, Vec<u8>>, color_map: &Map) ->$/;"	f
index_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn index_mut(&mut self, (x, y): (u32, u32)) -> &mut P {$/;"	f
index_of	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/colorops.rs	/^    fn index_of(&self, color: &Luma<u8>) -> usize {$/;"	P	implementation:BiLevel
index_of	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/colorops.rs	/^    fn index_of(&self, color: &Rgba<u8>) -> usize {$/;"	P	implementation:NeuQuant
index_of	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/colorops.rs	/^    fn index_of(&self, color: &Self::Color) -> usize;$/;"	P	interface:ColorMap
index_of	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^    pub fn index_of(&self, pixel: &[u8]) -> usize {$/;"	P	implementation:NeuQuant
init	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^    pub fn init(&mut self, pixels: &[u8]) {$/;"	P	implementation:NeuQuant
init	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    pub fn init(self) -> ImageResult<TIFFDecoder<R>> {$/;"	P	implementation:TIFFDecoder
init	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    pub fn init(&mut self, buf: Vec<u8>) {$/;"	P	implementation:BoolReader
init_partitions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    fn init_partitions(&mut self, n: usize) -> io::Result<()> {$/;"	P	implementation:VP8Decoder
init_top_macroblocks	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^fn init_top_macroblocks(width: usize) -> Vec<MacroBlock> {$/;"	f
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/gif.rs	/^    inner: Option<Either<gif::Decoder<R>, gif::Reader<R>>>$/;"	m	struct:Decoder
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    inner: Option<HDRDecoder<R>>,$/;"	m	struct:HDRAdapter
inner	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^    inner: Option<Either<png::Decoder<R>, png::Reader<R>>>$/;"	m	struct:PNGDecoder
inner_decoder	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^    inner_decoder: InnerDecoder<R>,$/;"	m	struct:ICODecoder
inner_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    pub fn inner_mut(&mut self) -> &mut I {$/;"	f
input	/home/cht/Rust/robinson/src/css.rs	/^    input: String,$/;"	m	struct:Parser
input	/home/cht/Rust/robinson/src/html.rs	/^    input: String,$/;"	m	struct:Parser
into_buffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/animation.rs	/^    pub fn into_buffer(self) -> RgbaImage {$/;"	P	implementation:Frame
into_frames	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn into_frames(self) -> ImageResult<Frames> {$/;"	P	interface:ImageDecoder
into_image_error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    fn into_image_error(self, description: &str) -> ImageResult<T> {$/;"	P	implementation:Result
into_image_error	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    fn into_image_error(self, description: &str) -> ImageResult<T>;$/;"	P	interface:IntoImageError
into_iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    fn into_iter(self) -> Self::IntoIter {$/;"	P	implementation:HDRDecoder
into_raw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    pub fn into_raw(self) -> Container {$/;"	f
into_vec	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    pub fn into_vec(self) -> Vec<P::Subpixel> {$/;"	f
intra_predict	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    fn intra_predict(&mut self, mbx: usize, mby: usize, mb: &MacroBlock, resdata: &[i32]) {$/;"	P	implementation:VP8Decoder
invert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn invert(&mut self);$/;"	P	interface:Pixel
invert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn invert(&mut self) {$/;"	P	implementation:Luma
invert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn invert(&mut self) {$/;"	P	implementation:LumaA
invert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn invert(&mut self) {$/;"	P	implementation:Rgb
invert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn invert(&mut self) {$/;"	P	implementation:Rgba
invert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^    fn invert(&mut self);$/;"	P	interface:Invert
invert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn invert(&mut self) {$/;"	P	implementation:DynamicImage
invert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/colorops.rs	/^pub fn invert<I: GenericImage>(image: &mut I) {$/;"	f
inxbuild	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^    fn inxbuild(&mut self) {$/;"	P	implementation:NeuQuant
inxsearch	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^    fn inxsearch(&self, b: u8, g: u8, r: u8, a: u8) -> usize {$/;"	P	implementation:NeuQuant
is_animated	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn is_animated(&mut self) -> ImageResult<bool> {$/;"	P	interface:ImageDecoder
is_arg	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^fn is_arg(arg: &str) -> bool {$/;"	f
is_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    fn is_color(&self) -> bool {$/;"	P	implementation:ImageType
is_color_mapped	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    fn is_color_mapped(&self) -> bool {$/;"	P	implementation:ImageType
is_encoded	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    fn is_encoded(&self) -> bool {$/;"	P	implementation:ImageType
is_png	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^    fn is_png<R: Read + Seek>(&self, r: &mut R) -> ImageResult<bool> {$/;"	P	implementation:DirEntry
isize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/traits.rs	/^impl Primitive for isize {$/;"	c
iwht4x4	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/transform.rs	/^pub fn iwht4x4(block: &mut [i32]) {$/;"	f
jpeg	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/lib.rs	/^pub mod jpeg;$/;"	n
kernel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^    pub kernel: Box<Fn(f32) -> f32 + 'a>,$/;"	m	struct:Filter
keyframe	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    pub keyframe: bool,$/;"	m	struct:Frame
lanczos	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^fn lanczos(x: f32, t: f32) -> f32 {$/;"	f
lanczos3_kernel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^pub fn lanczos3_kernel(x: f32) -> f32 {$/;"	f
layout	/home/cht/Rust/robinson/src/layout.rs	/^    fn layout(&mut self, containing_block: Dimensions) {$/;"	P	implementation:LayoutBox
layout	/home/cht/Rust/robinson/src/main.rs	/^pub mod layout;$/;"	n
layout_block	/home/cht/Rust/robinson/src/layout.rs	/^    fn layout_block(&mut self, containing_block: Dimensions) {$/;"	P	implementation:LayoutBox
layout_block_children	/home/cht/Rust/robinson/src/layout.rs	/^    fn layout_block_children(&mut self) {$/;"	P	implementation:LayoutBox
layout_tree	/home/cht/Rust/robinson/src/layout.rs	/^pub fn layout_tree<'a>($/;"	f
learn	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^    fn learn(&mut self, pixels: &[u8]) {$/;"	P	implementation:NeuQuant
left	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/animation.rs	/^    left: u32,$/;"	m	struct:Frame
left	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/animation.rs	/^    pub fn left(&self) -> u32 {$/;"	P	implementation:Frame
left	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    left: Option<Code>,$/;"	m	struct:Node
left	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    left: MacroBlock,$/;"	m	struct:VP8Decoder
left	/home/cht/Rust/robinson/src/layout.rs	/^    pub left: f32,$/;"	m	struct:EdgeSizes
left_border	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    left_border: Vec<u8>,$/;"	m	struct:VP8Decoder
left_pixels	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^fn left_pixels(a: &[u8], x0: usize, y0: usize, stride: usize) -> (u8, u8, u8, u8) {$/;"	f
len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    len: u32,$/;"	m	struct:Bitfield
limit_string_len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^fn limit_string_len(s: &str, len: usize) -> String {$/;"	f
load	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^pub fn load<R: BufRead+Seek>(r: R, format: ImageFormat) -> ImageResult<DynamicImage> {$/;"	f
load_from_memory	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^pub fn load_from_memory(buffer: &[u8]) -> ImageResult<DynamicImage> {$/;"	f
load_from_memory_with_format	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^pub fn load_from_memory_with_format(buf: &[u8], format: ImageFormat) -> ImageResult<DynamicImage/;"	f
load_rect	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn load_rect(&mut self, x: u32, y: u32, length: u32, width: u32) -> ImageResult<Vec<u8>> {$/;"	P	interface:ImageDecoder
long_name	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    long_name: String,$/;"	m	struct:OptGroup
long_only	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    long_only: bool,$/;"	m	struct:Options
long_only	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn long_only(&mut self, long_only: bool) -> &mut Options {$/;"	P	implementation:Options
long_to_short	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    fn long_to_short(&self) -> Opt {$/;"	P	implementation:OptGroup
lookup	/home/cht/Rust/robinson/src/style.rs	/^    pub fn lookup(&self, name: &str, fallback_name: &str, default: &Value) -> Value {$/;"	P	implementation:StyledNode
loopfilter_level	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    loopfilter_level: i8,$/;"	m	struct:Segment
luma_actable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    luma_actable: Vec<(u8, u16)>,$/;"	m	struct:JPEGEncoder
luma_dctable	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    luma_dctable: Vec<(u8, u16)>,$/;"	m	struct:JPEGEncoder
luma_mode	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    luma_mode:   i8,$/;"	m	struct:MacroBlock
lzw	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/mod.rs	/^pub mod lzw;$/;"	n
main	/home/cht/Rust/robinson/src/main.rs	/^fn main() {$/;"	f
map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn map<F>(&self, f: F) -> Self where F: Fn(Self::Subpixel) -> Self::Subpixel;$/;"	P	interface:Pixel
map2	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn map2<F>(&self, other: &Self, f: F) -> Self$/;"	P	interface:Pixel
map_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/colorops.rs	/^    fn map_color(&self, color: &mut Luma<u8>) {$/;"	P	implementation:BiLevel
map_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/colorops.rs	/^    fn map_color(&self, color: &mut Rgba<u8>) {$/;"	P	implementation:NeuQuant
map_color	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/colorops.rs	/^    fn map_color(&self, color: &mut Self::Color);$/;"	P	interface:ColorMap
map_entry_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    map_entry_size: u8,    \/\/ size of map entries in bits$/;"	m	struct:Header
map_length	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    map_length: u16,      \/\/ length of map$/;"	m	struct:Header
map_origin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    map_origin: u16,       \/\/ starting index of map$/;"	m	struct:Header
map_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^    pub fn map_pixel(&self, pixel: &mut [u8]) {$/;"	P	implementation:NeuQuant
map_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    map_type: u8,          \/\/ color map type$/;"	m	struct:Header
map_with_alpha	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn map_with_alpha<F, G>(&self, f: F, g: G) -> Self$/;"	P	interface:Pixel
margin	/home/cht/Rust/robinson/src/layout.rs	/^    pub margin: EdgeSizes,$/;"	m	struct:Dimensions
margin_box	/home/cht/Rust/robinson/src/layout.rs	/^    pub fn margin_box(self) -> Rect {$/;"	P	implementation:Dimensions
match_rule	/home/cht/Rust/robinson/src/style.rs	/^fn match_rule<'a>(elem: &ElementData, rule: &'a Rule) -> Option<MatchedRule<'a>> {$/;"	f
matches	/home/cht/Rust/robinson/src/style.rs	/^fn matches(elem: &ElementData, selector: &Selector) -> bool {$/;"	f
matches_simple_selector	/home/cht/Rust/robinson/src/style.rs	/^fn matches_simple_selector(elem: &ElementData, selector: &SimpleSelector) -> bool {$/;"	f
matching_rules	/home/cht/Rust/robinson/src/style.rs	/^fn matching_rules<'a>(elem: &ElementData, stylesheet: &'a Stylesheet) -> Vec<MatchedRule<'a>> {$/;"	f
math	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/lib.rs	/^pub mod math;$/;"	n
max_pixel_value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/encoder.rs	/^fn max_pixel_value(pixel_type: color::ColorType) -> u16 {$/;"	f
maxwhite	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/decoder.rs	/^    maxwhite: u32,$/;"	m	struct:PPMDecoder
mbheight	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    mbheight: u16,$/;"	m	struct:VP8Decoder
mbwidth	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    mbwidth: u16,$/;"	m	struct:VP8Decoder
meta	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    meta: HDRMetadata,$/;"	m	struct:HDRAdapter
meta	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    meta: HDRMetadata,$/;"	m	struct:HDRDecoder
metadata	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    pub fn metadata(&self) -> HDRMetadata {$/;"	P	implementation:HDRDecoder
metadata	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/decoder.rs	/^    fn metadata(&mut self) -> ImageResult<jpeg_decoder::ImageInfo> {$/;"	P	implementation:JPEGDecoder
metadata	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/decoder.rs	/^    metadata: Option<jpeg_decoder::ImageInfo>,$/;"	m	struct:JPEGDecoder
min_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    min_size: u8,$/;"	m	struct:DecodingDict
min_size	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    min_size: u8,$/;"	m	struct:EncodingDict
more_images	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    pub fn more_images(&self) -> bool {$/;"	P	implementation:TIFFDecoder
name	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    name: Name,$/;"	m	struct:Opt
name	/home/cht/Rust/robinson/src/css.rs	/^    pub name: String,$/;"	m	struct:Declaration
nbits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    nbits: u8,$/;"	m	struct:BitWriter
netindex	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^    netindex: Vec<usize>,$/;"	m	struct:NeuQuant
netsize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^    netsize: usize,$/;"	m	struct:NeuQuant
network	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^    network: Vec<Neuron>,$/;"	m	struct:NeuQuant
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn new() -> Options {$/;"	P	implementation:Options
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/animation.rs	/^    pub fn new(buffer: RgbaImage) -> Frame {$/;"	P	implementation:Frame
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/animation.rs	/^    pub fn new(frames: Vec<Frame>) -> Frames {$/;"	P	implementation:Frames
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    pub fn new(r: R) -> BMPDecoder<R> {$/;"	P	implementation:BMPDecoder
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/encoder.rs	/^    pub fn new(w: &'a mut W) -> Self {$/;"	P	implementation:BMPEncoder
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    pub fn new(width: u32, height: u32) -> ImageBuffer<P, Vec<P::Subpixel>> {$/;"	f
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/gif.rs	/^    pub fn new(r: R) -> Decoder<R> {$/;"	P	implementation:Decoder
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/gif.rs	/^    pub fn new(w: W) -> Encoder<W> {$/;"	P	implementation:Encoder
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    fn new() -> HDRMetadata {$/;"	P	implementation:HDRMetadata
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    pub fn new(r: R) -> ImageResult<HDRAdapter<R>> {$/;"	P	implementation:HDRAdapter
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    pub fn new(reader: R) -> ImageResult<HDRDecoder<R>> {$/;"	P	implementation:HDRDecoder
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^    fn new(data: &'a [u8]) -> NorunCombineIterator<'a> {$/;"	P	implementation:NorunCombineIterator
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^    fn new(data: &'a [u8]) -> RunIterator<'a> {$/;"	P	implementation:RunIterator
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^    pub fn new(w: W) -> HDREncoder<W> {$/;"	P	implementation:HDREncoder
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^    pub fn new(mut r: R) -> ImageResult<ICODecoder<R>> {$/;"	P	implementation:ICODecoder
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/encoder.rs	/^    pub fn new(w: W) -> ICOEncoder<W> {$/;"	P	implementation:ICOEncoder
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    pub fn new(image: &mut I, x: u32, y: u32, width: u32, height: u32) -> SubImage<I> {$/;"	f
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/decoder.rs	/^    pub fn new(r: R) -> JPEGDecoder<R> {$/;"	P	implementation:JPEGDecoder
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    fn new(w: &'a mut W) -> Self {$/;"	P	implementation:BitWriter
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    pub fn new(w: &mut W) -> JPEGEncoder<W> {$/;"	P	implementation:JPEGEncoder
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^    pub fn new(samplefac: i32, colors: usize, pixels: &[u8]) -> Self {$/;"	P	implementation:NeuQuant
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^    pub fn new(r: R) -> PNGDecoder<R> {$/;"	P	implementation:PNGDecoder
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^    pub fn new(w: W) -> PNGEncoder<W> {$/;"	P	implementation:PNGEncoder
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/decoder.rs	/^    pub fn new(r: R) -> ImageResult<PPMDecoder<R>> {$/;"	P	implementation:PPMDecoder
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/encoder.rs	/^    pub fn new(w: &mut W) -> PPMEncoder<W> {$/;"	P	implementation:PPMEncoder
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    fn new() -> Header {$/;"	P	implementation:Header
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    fn new(img_type: u8) -> ImageType {$/;"	P	implementation:ImageType
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    pub fn new(r: R) -> TGADecoder<R> {$/;"	P	implementation:TGADecoder
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    pub fn new(r: R) -> ImageResult<TIFFDecoder<R>> {$/;"	P	implementation:TIFFDecoder
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^    pub fn new<R>(reader: &mut SmartReader<R>) -> io::Result<(usize, LZWReader)> where R: Read +/;"	P	implementation:LZWReader
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    fn new(c: u8) -> Node {$/;"	P	implementation:Node
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    fn new(min_size: u8) -> DecodingDict {$/;"	P	implementation:DecodingDict
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    fn new(min_size: u8) -> EncodingDict {$/;"	P	implementation:EncodingDict
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/decoder.rs	/^    pub fn new(r: R) -> WebpDecoder<R> {$/;"	P	implementation:WebpDecoder
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    fn new() -> MacroBlock {$/;"	P	implementation:MacroBlock
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    pub fn new() -> BoolReader {$/;"	P	implementation:BoolReader
new	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    pub fn new(r: R) -> VP8Decoder<R> {$/;"	P	implementation:VP8Decoder
new	/home/cht/Rust/robinson/src/layout.rs	/^    fn new(box_type: BoxType) -> LayoutBox {$/;"	P	implementation:LayoutBox
new	/home/cht/Rust/robinson/src/painting.rs	/^    fn new(width: usize, height: usize) -> Canvas {$/;"	P	implementation:Canvas
new	/home/cht/Rust/robinson/src/pdf.rs	/^    fn new(output: &'a mut W) -> io::Result<Pdf<'a, W>> {$/;"	P	implementation:Pdf
new_luma8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn new_luma8(w: u32, h: u32) -> DynamicImage {$/;"	P	implementation:DynamicImage
new_luma_a8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn new_luma_a8(w: u32, h: u32) -> DynamicImage {$/;"	P	implementation:DynamicImage
new_nonstrict	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    pub fn new_nonstrict(r: R) -> ImageResult<HDRAdapter<R>> {$/;"	P	implementation:HDRAdapter
new_rgb8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn new_rgb8(w: u32, h: u32) -> DynamicImage {$/;"	P	implementation:DynamicImage
new_rgba8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn new_rgba8(w: u32, h: u32) -> DynamicImage {$/;"	P	implementation:DynamicImage
new_with_quality	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    pub fn new_with_quality(w: &mut W, quality: u8) -> JPEGEncoder<W> {$/;"	P	implementation:JPEGEncoder
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/animation.rs	/^    fn next(&mut self) -> Option<Frame> {$/;"	P	implementation:Frames
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn next(&mut self) -> Option<&'a mut [u8]> {$/;"	P	implementation:RowIterator
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn next(&mut self) -> Option<RLEInsn> {$/;"	P	implementation:RLEInsnIterator
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn next(&mut self) -> Option<&'a P> {$/;"	f
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn next(&mut self) -> Option<&'a mut P> {$/;"	f
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn next(&mut self) -> Option<(u32, u32, &'a P)> {$/;"	f
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn next(&mut self) -> Option<(u32, u32, &'a mut P)> {$/;"	f
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:HDRImageDecoderIterator
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:NorunCombineIterator
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:RunIterator
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn next(&mut self) -> Option<(u32, u32, &'a mut I::Pixel)> {$/;"	f
next	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn next(&mut self) -> Option<(u32, u32, I::Pixel)> {$/;"	P	implementation:Pixels
next_back	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn next_back(&mut self) -> Option<&'a P> {$/;"	f
next_back	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn next_back(&mut self) -> Option<&'a mut P> {$/;"	f
next_char	/home/cht/Rust/robinson/src/css.rs	/^    fn next_char(&self) -> char {$/;"	P	implementation:Parser
next_char	/home/cht/Rust/robinson/src/html.rs	/^    fn next_char(&self) -> char {$/;"	P	implementation:Parser
next_code	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    fn next_code(&self) -> u16 {$/;"	P	implementation:DecodingDict
next_code	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    fn next_code(&self) -> usize {$/;"	P	implementation:EncodingDict
next_ifd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    next_ifd: Option<u32>,$/;"	m	struct:TIFFDecoder
next_image	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    pub fn next_image(mut self) -> ImageResult<TIFFDecoder<R>> {$/;"	P	implementation:TIFFDecoder
no_file_header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    no_file_header: bool,$/;"	m	struct:BMPDecoder
node	/home/cht/Rust/robinson/src/style.rs	/^    pub node: &'a Node,$/;"	m	struct:StyledNode
node_type	/home/cht/Rust/robinson/src/dom.rs	/^    pub node_type: NodeType,$/;"	m	struct:Node
noruncombine_test	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^fn noruncombine_test() {$/;"	f
nq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/mod.rs	/^pub mod nq;$/;"	n
num_channels	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn num_channels(&self) -> usize {$/;"	P	implementation:BMPDecoder
num_color_planes	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^    num_color_planes: u16,$/;"	m	struct:DirEntry
num_components	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/color.rs	/^pub fn num_components(c: ColorType) -> usize {$/;"	f
num_partitions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    num_partitions: u8,$/;"	m	struct:VP8Decoder
object_offsets	/home/cht/Rust/robinson/src/pdf.rs	/^    object_offsets: Vec<i64>,$/;"	m	struct:Pdf
occur	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    occur: Occur,$/;"	m	struct:Opt
occur	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    occur: Occur,$/;"	m	struct:OptGroup
offset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/ifd.rs	/^    offset: [u8; 4],$/;"	m	struct:Entry
open	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^pub fn open<P>(path: P) -> ImageResult<DynamicImage> where P: AsRef<Path> {$/;"	f
open_impl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^fn open_impl(path: &Path) -> ImageResult<DynamicImage> {$/;"	f
opt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn opt($/;"	P	implementation:Options
opt_count	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn opt_count(&self, nm: &str) -> usize {$/;"	P	implementation:Matches
opt_default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn opt_default(&self, nm: &str, def: &str) -> Option<String> {$/;"	P	implementation:Matches
opt_defined	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn opt_defined(&self, nm: &str) -> bool {$/;"	P	implementation:Matches
opt_get	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn opt_get<T>(&self, nm: &str) -> result::Result<Option<T>, T::Err>$/;"	P	implementation:Matches
opt_get_default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn opt_get_default<T>(&self, nm: &str, def: T) -> result::Result<T, T::Err>$/;"	P	implementation:Matches
opt_positions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn opt_positions(&self, nm: &str) -> Vec<usize> {$/;"	P	implementation:Matches
opt_present	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn opt_present(&self, nm: &str) -> bool {$/;"	P	implementation:Matches
opt_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn opt_str(&self, nm: &str) -> Option<String> {$/;"	P	implementation:Matches
opt_strs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn opt_strs(&self, nm: &str) -> Vec<String> {$/;"	P	implementation:Matches
opt_strs_pos	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn opt_strs_pos(&self, nm: &str) -> Vec<(usize, String)> {$/;"	P	implementation:Matches
opt_val	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    fn opt_val(&self, nm: &str) -> Option<Optval> {$/;"	P	implementation:Matches
opt_vals	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    fn opt_vals(&self, nm: &str) -> Vec<(usize, Optval)> {$/;"	P	implementation:Matches
optflag	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn optflag(&mut self, short_name: &str, long_name: &str, desc: &str) -> &mut Options {$/;"	P	implementation:Options
optflagmulti	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn optflagmulti(&mut self, short_name: &str, long_name: &str, desc: &str) -> &mut Option/;"	P	implementation:Options
optflagopt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn optflagopt($/;"	P	implementation:Options
optmulti	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn optmulti($/;"	P	implementation:Options
optopt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn optopt($/;"	P	implementation:Options
opts	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    opts: Vec<Opt>,$/;"	m	struct:Matches
opts_present	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn opts_present(&self, names: &[String]) -> bool {$/;"	P	implementation:Matches
opts_str	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn opts_str(&self, names: &[String]) -> Option<String> {$/;"	P	implementation:Matches
orientation	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    pub orientation: ((i8, i8), (i8, i8)), $/;"	m	struct:HDRMetadata
output	/home/cht/Rust/robinson/src/pdf.rs	/^    output: &'a mut W,$/;"	m	struct:Pdf
overlay	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/mod.rs	/^pub fn overlay<I: GenericImage>(bottom: &mut I, top: &I, x: u32, y:u32) {$/;"	f
pad_byte	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    fn pad_byte(&mut self) -> io::Result<()> {$/;"	P	implementation:BitWriter
padding	/home/cht/Rust/robinson/src/layout.rs	/^    pub padding: EdgeSizes,$/;"	m	struct:Dimensions
padding_box	/home/cht/Rust/robinson/src/layout.rs	/^    pub fn padding_box(self) -> Rect {$/;"	P	implementation:Dimensions
page_objects_ids	/home/cht/Rust/robinson/src/pdf.rs	/^    page_objects_ids: Vec<usize>,$/;"	m	struct:Pdf
paint	/home/cht/Rust/robinson/src/painting.rs	/^pub fn paint(layout_root: &LayoutBox, bounds: Rect) -> Canvas {$/;"	f
paint_item	/home/cht/Rust/robinson/src/painting.rs	/^    fn paint_item(&mut self, item: &DisplayCommand) {$/;"	P	implementation:Canvas
painting	/home/cht/Rust/robinson/src/main.rs	/^pub mod painting;$/;"	n
palette	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    palette: Option<Vec<(u8, u8, u8)>>,$/;"	m	struct:BMPDecoder
parse	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn parse<C: IntoIterator>(&self, args: C) -> Result$/;"	P	implementation:Options
parse	/home/cht/Rust/robinson/src/css.rs	/^pub fn parse(source: String) -> Stylesheet {$/;"	f
parse	/home/cht/Rust/robinson/src/html.rs	/^pub fn parse(source: String) -> dom::Node {$/;"	f
parse_attr	/home/cht/Rust/robinson/src/html.rs	/^    fn parse_attr(&mut self) -> (String, String) {$/;"	P	implementation:Parser
parse_attr_value	/home/cht/Rust/robinson/src/html.rs	/^    fn parse_attr_value(&mut self) -> String {$/;"	P	implementation:Parser
parse_attributes	/home/cht/Rust/robinson/src/html.rs	/^    fn parse_attributes(&mut self) -> dom::AttrMap {$/;"	P	implementation:Parser
parse_color	/home/cht/Rust/robinson/src/css.rs	/^    fn parse_color(&mut self) -> Value {$/;"	P	implementation:Parser
parse_declaration	/home/cht/Rust/robinson/src/css.rs	/^    fn parse_declaration(&mut self) -> Declaration {$/;"	P	implementation:Parser
parse_declarations	/home/cht/Rust/robinson/src/css.rs	/^    fn parse_declarations(&mut self) -> Vec<Declaration> {$/;"	P	implementation:Parser
parse_dimensions_line	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^fn parse_dimensions_line<'a>(line: &Cow<'a, str>, strict: bool) -> ImageResult<(u32,u32)> {$/;"	f
parse_element	/home/cht/Rust/robinson/src/html.rs	/^    fn parse_element(&mut self) -> dom::Node {$/;"	P	implementation:Parser
parse_float	/home/cht/Rust/robinson/src/css.rs	/^    fn parse_float(&mut self) -> f32 {$/;"	P	implementation:Parser
parse_hex_pair	/home/cht/Rust/robinson/src/css.rs	/^    fn parse_hex_pair(&mut self) -> u8 {$/;"	P	implementation:Parser
parse_identifier	/home/cht/Rust/robinson/src/css.rs	/^    fn parse_identifier(&mut self) -> String {$/;"	P	implementation:Parser
parse_length	/home/cht/Rust/robinson/src/css.rs	/^    fn parse_length(&mut self) -> Value {$/;"	P	implementation:Parser
parse_node	/home/cht/Rust/robinson/src/html.rs	/^    fn parse_node(&mut self) -> dom::Node {$/;"	P	implementation:Parser
parse_nodes	/home/cht/Rust/robinson/src/html.rs	/^    fn parse_nodes(&mut self) -> Vec<dom::Node> {$/;"	P	implementation:Parser
parse_rule	/home/cht/Rust/robinson/src/css.rs	/^    fn parse_rule(&mut self) -> Rule {$/;"	P	implementation:Parser
parse_rules	/home/cht/Rust/robinson/src/css.rs	/^    fn parse_rules(&mut self) -> Vec<Rule> {$/;"	P	implementation:Parser
parse_selectors	/home/cht/Rust/robinson/src/css.rs	/^    fn parse_selectors(&mut self) -> Vec<Selector> {$/;"	P	implementation:Parser
parse_simple_selector	/home/cht/Rust/robinson/src/css.rs	/^    fn parse_simple_selector(&mut self) -> SimpleSelector {$/;"	P	implementation:Parser
parse_space_separated_f32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^fn parse_space_separated_f32(line: &str, vals: &mut [f32], name: &str) -> ImageResult<bool> {$/;"	f
parse_tag_name	/home/cht/Rust/robinson/src/html.rs	/^    fn parse_tag_name(&mut self) -> String {$/;"	P	implementation:Parser
parse_text	/home/cht/Rust/robinson/src/html.rs	/^    fn parse_text(&mut self) -> dom::Node {$/;"	P	implementation:Parser
parse_unit	/home/cht/Rust/robinson/src/css.rs	/^    fn parse_unit(&mut self) -> Unit {$/;"	P	implementation:Parser
parse_value	/home/cht/Rust/robinson/src/css.rs	/^    fn parse_value(&mut self) -> Value {$/;"	P	implementation:Parser
parsing_style	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    parsing_style: ParsingStyle,$/;"	m	struct:Options
parsing_style	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn parsing_style(&mut self, style: ParsingStyle) -> &mut Options {$/;"	P	implementation:Options
partitions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    partitions: [BoolReader; 8],$/;"	m	struct:VP8Decoder
pdf	/home/cht/Rust/robinson/src/main.rs	/^pub mod pdf;$/;"	n
photometric_interpretation	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    photometric_interpretation: PhotometricInterpretation,$/;"	m	struct:TIFFDecoder
pixel_aspect_ratio	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    pub pixel_aspect_ratio: Option<f32>,$/;"	m	struct:HDRMetadata
pixel_depth	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    pixel_depth: u8,       \/\/ bits per pixel$/;"	m	struct:Header
pixel_diffs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/affine.rs	/^    fn pixel_diffs<I, J, P>(left: &I, right: &J) -> Vec<((u32, u32, P), (u32, u32, P))>$/;"	f	module:test
pixel_type	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    pub pixel_type: u8,$/;"	m	struct:Frame
pixels	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    pixels: Pixels<'a, P>,$/;"	m	struct:EnumeratePixels
pixels	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    pixels: PixelsMut<'a, P>,$/;"	m	struct:EnumeratePixelsMut
pixels	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    pub fn pixels<'a>(&'a self) -> Pixels<'a, P> {$/;"	f
pixels	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn pixels(&self) -> Pixels<Self> {$/;"	P	interface:GenericImage
pixels	/home/cht/Rust/robinson/src/painting.rs	/^    pub pixels: Vec<Color>,$/;"	m	struct:Canvas
pixels_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    pub fn pixels_mut(&mut self) -> PixelsMut<P> {$/;"	f
pixels_mut	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn pixels_mut(&mut self) -> MutPixels<Self> {$/;"	P	interface:GenericImage
png	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/lib.rs	/^pub mod png;$/;"	n
pos	/home/cht/Rust/robinson/src/css.rs	/^    pos: usize,$/;"	m	struct:Parser
pos	/home/cht/Rust/robinson/src/html.rs	/^    pos: usize,$/;"	m	struct:Parser
ppm	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/lib.rs	/^pub mod ppm;$/;"	n
predict_4x4	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^fn predict_4x4(ws: &mut [u8], stride: usize, modes: &[i8], resdata: &[i32]) {$/;"	f
predict_bdcpred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^fn predict_bdcpred(a: &mut [u8], x0: usize, y0: usize, stride: usize) {$/;"	f
predict_bhdpred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^fn predict_bhdpred(a: &mut [u8], x0: usize, y0: usize, stride: usize) {$/;"	f
predict_bhepred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^fn predict_bhepred(a: &mut [u8], x0: usize, y0: usize, stride: usize) {$/;"	f
predict_bhupred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^fn predict_bhupred(a: &mut [u8], x0: usize, y0: usize, stride: usize) {$/;"	f
predict_bldpred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^fn predict_bldpred(a: &mut [u8], x0: usize, y0: usize, stride: usize) {$/;"	f
predict_brdpred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^fn predict_brdpred(a: &mut [u8], x0: usize, y0: usize, stride: usize) {$/;"	f
predict_bvepred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^fn predict_bvepred(a: &mut [u8], x0: usize, y0: usize, stride: usize) {$/;"	f
predict_bvlpred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^fn predict_bvlpred(a: &mut [u8], x0: usize, y0: usize, stride: usize) {$/;"	f
predict_bvrpred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^fn predict_bvrpred(a: &mut [u8], x0: usize, y0: usize, stride: usize) {$/;"	f
predict_dcpred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^fn predict_dcpred(a: &mut [u8], size: usize, stride: usize, above: bool, left: bool) {$/;"	f
predict_hpred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^fn predict_hpred(a: &mut [u8], size: usize, x0: usize, y0: usize, stride: usize) {$/;"	f
predict_tmpred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^fn predict_tmpred(a: &mut [u8], size: usize, x0: usize, y0: usize, stride: usize) {$/;"	f
predict_vpred	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^fn predict_vpred(a: &mut [u8], size: usize, x0: usize, y0: usize, stride: usize) {$/;"	f
prefix	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    prefix: Option<Code>,$/;"	m	struct:Node
prev	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^    prev: Option<RunOrNot>,$/;"	m	struct:NorunCombineIterator
prob_intra	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    prob_intra: Prob,$/;"	m	struct:VP8Decoder
prob_skip_false	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    prob_skip_false: Option<Prob>,$/;"	m	struct:VP8Decoder
push	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    fn push(&mut self, key: Option<Code>, value: u8) {$/;"	P	implementation:DecodingDict
push_node	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    fn push_node(&mut self, node: Node) {$/;"	P	implementation:EncodingDict
put_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn put_pixel(&mut self, x: u32, y: u32, pixel: P) {$/;"	f
put_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    pub fn put_pixel(&mut self, x: u32, y: u32, pixel: P) {$/;"	f
put_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    fn put_pixel(&mut self, x: u32, y: u32, pixel: color::Rgba<u8>) {$/;"	P	implementation:DynamicImage
put_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn put_pixel(&mut self, x: u32, y: u32, pixel: I::Pixel) {$/;"	f
put_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn put_pixel(&mut self, x: u32, y: u32, pixel: Self::Pixel);$/;"	P	interface:GenericImage
px_to_pt	/home/cht/Rust/robinson/src/pdf.rs	/^fn px_to_pt(value: f32) -> f32 {$/;"	f
quantizer_level	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    quantizer_level:  i8,$/;"	m	struct:Segment
r	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    r: &'a mut R,$/;"	m	struct:RLEInsnIterator
r	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    r: Bitfield,$/;"	m	struct:Bitfields
r	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    r: R,$/;"	m	struct:BMPDecoder
r	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    r: R,$/;"	m	struct:HDRDecoder
r	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    r: R,$/;"	m	struct:HDRImageDecoderIterator
r	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^    r: T,$/;"	m	struct:Quad
r	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    r: R,$/;"	m	struct:TGADecoder
r	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/ifd.rs	/^    fn r(&self, byte_order: ByteOrder) -> SmartReader<io::Cursor<Vec<u8>>> {$/;"	P	implementation:Entry
r	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/decoder.rs	/^    r: R,$/;"	m	struct:WebpDecoder
r	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    r: R,$/;"	m	struct:VP8Decoder
r	/home/cht/Rust/robinson/src/css.rs	/^    pub r: u8,$/;"	m	struct:Color
range	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    range: u32,$/;"	m	struct:BoolReader
raw_pixels	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn raw_pixels(&self) -> Vec<u8> {$/;"	P	implementation:DynamicImage
read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn read(&self, data: u32) -> u8 {$/;"	P	implementation:Bitfield
read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:LZWReader
read	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:SmartReader
read_16_bit_pixel_data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn read_16_bit_pixel_data(&mut self, bitfields: Option<&Bitfields>) -> ImageResult<Vec<u8>> /;"	P	implementation:BMPDecoder
read_32_bit_pixel_data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn read_32_bit_pixel_data(&mut self) -> ImageResult<Vec<u8>> {$/;"	P	implementation:BMPDecoder
read_bitmap_core_header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn read_bitmap_core_header(&mut self) ->ImageResult<()> {$/;"	P	implementation:BMPDecoder
read_bitmap_info_header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn read_bitmap_info_header(&mut self) -> ImageResult<()> {$/;"	P	implementation:BMPDecoder
read_bitmasks	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn read_bitmasks(&mut self) -> ImageResult<()> {$/;"	P	implementation:BMPDecoder
read_bits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/bitstream.rs	/^    fn read_bits(&mut self, n: u8) -> io::Result<u16> {$/;"	f
read_bits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/bitstream.rs	/^    fn read_bits(&mut self, n: u8) -> io::Result<u16>;$/;"	P	interface:BitReader
read_bool	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    pub fn read_bool(&mut self, probability: u8) -> u8 {$/;"	P	implementation:BoolReader
read_byte	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^fn read_byte<R: BufRead>(r: &mut R) -> io::Result<u8> {$/;"	f
read_coefficients	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    fn read_coefficients(&mut self,$/;"	P	implementation:VP8Decoder
read_color_information	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    fn read_color_information(&mut self) -> ImageResult<()> {$/;"	P	implementation:TGADecoder
read_color_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    fn read_color_map(&mut self) -> ImageResult<()> {$/;"	P	implementation:TGADecoder
read_encoded_data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    fn read_encoded_data(&mut self) -> ImageResult<Vec<u8>> {$/;"	P	implementation:TGADecoder
read_entries	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^fn read_entries<R: Read>(r: &mut R) -> ImageResult<Vec<DirEntry>> {$/;"	f
read_entry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^fn read_entry<R: Read>(r: &mut R) -> ImageResult<DirEntry> {$/;"	f
read_entry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    fn read_entry(&mut self) -> ImageResult<Option<(ifd::Tag, ifd::Entry)>> {$/;"	P	implementation:TIFFDecoder
read_file_header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn read_file_header(&mut self) -> ImageResult<()> {$/;"	P	implementation:BMPDecoder
read_flag	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    pub fn read_flag(&mut self) -> bool {$/;"	P	implementation:BoolReader
read_frame	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/decoder.rs	/^    fn read_frame(&mut self) -> ImageResult<()> {$/;"	P	implementation:WebpDecoder
read_frame_header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    fn read_frame_header(&mut self) -> io::Result<()> {$/;"	P	implementation:VP8Decoder
read_full_byte_pixel_data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn read_full_byte_pixel_data(&mut self, format: FormatFullBytes) -> ImageResult<Vec<u8>> {$/;"	P	implementation:BMPDecoder
read_header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    fn read_header(&mut self) -> ImageResult<()> {$/;"	P	implementation:TGADecoder
read_header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    fn read_header(&mut self) -> ImageResult<()> {$/;"	P	implementation:TIFFDecoder
read_ifd	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    fn read_ifd(&mut self) -> ImageResult<Directory> {$/;"	P	implementation:TIFFDecoder
read_image	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn read_image(&mut self) -> ImageResult<DecodingResult> {$/;"	P	implementation:BMPDecoder
read_image	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/gif.rs	/^    fn read_image(&mut self) -> ImageResult<DecodingResult> {$/;"	P	implementation:Decoder
read_image	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    fn read_image(&mut self) -> ImageResult<DecodingResult> {$/;"	P	implementation:HDRAdapter
read_image	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^    fn read_image(&mut self) -> ImageResult<DecodingResult> {$/;"	P	implementation:ICODecoder
read_image	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn read_image(&mut self) -> ImageResult<DecodingResult>;$/;"	P	interface:ImageDecoder
read_image	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/decoder.rs	/^    fn read_image(&mut self) -> ImageResult<DecodingResult> {$/;"	P	implementation:JPEGDecoder
read_image	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^    fn read_image(&mut self) -> ImageResult<DecodingResult> {$/;"	P	implementation:PNGDecoder
read_image	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/decoder.rs	/^    fn read_image(&mut self) -> ImageResult<DecodingResult> {$/;"	P	implementation:PPMDecoder
read_image	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    fn read_image(&mut self) -> ImageResult<DecodingResult> {$/;"	P	implementation:TGADecoder
read_image	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    fn read_image(&mut self) -> ImageResult<DecodingResult> {$/;"	P	implementation:TIFFDecoder
read_image	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/decoder.rs	/^    fn read_image(&mut self) -> ImageResult<image::DecodingResult> {$/;"	P	implementation:WebpDecoder
read_image_data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn read_image_data(&mut self) -> ImageResult<Vec<u8>> {$/;"	P	implementation:BMPDecoder
read_image_data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    fn read_image_data(&mut self) -> ImageResult<Vec<u8>> {$/;"	P	implementation:TGADecoder
read_image_hdr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    pub fn read_image_hdr(self) -> ImageResult<Vec<Rgb<f32>>> {$/;"	P	implementation:HDRDecoder
read_image_id	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    fn read_image_id(&mut self) -> ImageResult<()> {$/;"	P	implementation:TGADecoder
read_image_ldr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    pub fn read_image_ldr(self) -> ImageResult<Vec<Rgb<u8>>> {$/;"	P	implementation:HDRDecoder
read_image_native	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    pub fn read_image_native(mut self) -> ImageResult<Vec<RGBE8Pixel>> {$/;"	P	implementation:HDRDecoder
read_image_transform	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    pub fn read_image_transform<T: Send, F: Send + Sync + Fn(RGBE8Pixel)-> T>(mut self, f: F) ->/;"	P	implementation:HDRDecoder
read_line_u8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^fn read_line_u8<R: BufRead>(r: &mut R) -> ::std::io::Result<Option<Vec<u8>>> {$/;"	f
read_line_u8_test	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^fn read_line_u8_test() {$/;"	f
read_literal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    pub fn read_literal(&mut self, n: u8) -> u8 {$/;"	P	implementation:BoolReader
read_long	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    pub fn read_long(&mut self) -> Result<u32, io::Error> {$/;"	P	implementation:TIFFDecoder
read_loop_filter_adjustments	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    fn read_loop_filter_adjustments(&mut self) {$/;"	P	implementation:VP8Decoder
read_macroblock_header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    fn read_macroblock_header(&mut self, mbx: usize) -> (bool, MacroBlock) {$/;"	P	implementation:VP8Decoder
read_magnitude_and_sign	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    pub fn read_magnitude_and_sign(&mut self, n: u8) -> i32 {$/;"	P	implementation:BoolReader
read_metadata	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn read_metadata(&mut self) -> ImageResult<()> {$/;"	P	implementation:BMPDecoder
read_metadata	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    fn read_metadata(&mut self) -> ImageResult<()> {$/;"	P	implementation:TGADecoder
read_metadata	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/decoder.rs	/^    fn read_metadata(&mut self) -> ImageResult<()> {$/;"	P	implementation:WebpDecoder
read_metadata_in_ico_format	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    pub fn read_metadata_in_ico_format(&mut self) -> ImageResult<()> {$/;"	P	implementation:BMPDecoder
read_next_string	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/decoder.rs	/^  fn read_next_string(reader: &mut BufReader<R>) -> ImageResult<String> {$/;"	P	implementation:PPMDecoder
read_next_u32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/decoder.rs	/^  fn read_next_u32(reader: &mut BufReader<R>) -> ImageResult<u32> {$/;"	P	implementation:PPMDecoder
read_offset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    pub fn read_offset(&mut self) -> Result<[u8; 4], io::Error> {$/;"	P	implementation:TIFFDecoder
read_palette	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn read_palette(&mut self) -> ImageResult<()> {$/;"	P	implementation:BMPDecoder
read_palettized_pixel_data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn read_palettized_pixel_data(&mut self) -> ImageResult<Vec<u8>> {$/;"	P	implementation:BMPDecoder
read_quantization_indices	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    fn read_quantization_indices(&mut self) {$/;"	P	implementation:VP8Decoder
read_raw_file	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^pub fn read_raw_file<P: AsRef<Path>>(path: P) -> ::std::io::Result<Vec<Rgb<f32>>> {$/;"	f
read_residual_data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    fn read_residual_data(&mut self, mb: &MacroBlock, mbx: usize, p: usize) -> [i32; 384] {$/;"	P	implementation:VP8Decoder
read_rgbe	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^fn read_rgbe<R: BufRead>(r: &mut R) -> io::Result<RGBE8Pixel> {$/;"	f
read_riff_header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/decoder.rs	/^    fn read_riff_header(&mut self) -> ImageResult<u32> {$/;"	P	implementation:WebpDecoder
read_rle_data	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn read_rle_data(&mut self, image_type: ImageType) -> ImageResult<Vec<u8>> {$/;"	P	implementation:BMPDecoder
read_scanline	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn read_scanline(&mut self, _buf: &mut [u8]) -> ImageResult<u32> {$/;"	P	implementation:BMPDecoder
read_scanline	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/gif.rs	/^    fn read_scanline(&mut self, buf: &mut [u8]) -> ImageResult<u32> {$/;"	P	implementation:Decoder
read_scanline	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    fn read_scanline(&mut self, _: &mut [u8]) -> ImageResult<u32> {$/;"	P	implementation:HDRAdapter
read_scanline	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^fn read_scanline<R: BufRead>(r: &mut R, buf: &mut [RGBE8Pixel]) -> ImageResult<()> {$/;"	f
read_scanline	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^    fn read_scanline(&mut self, buf: &mut [u8]) -> ImageResult<u32> {$/;"	P	implementation:ICODecoder
read_scanline	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn read_scanline(&mut self, buf: &mut [u8]) -> ImageResult<u32>;$/;"	P	interface:ImageDecoder
read_scanline	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/decoder.rs	/^    fn read_scanline(&mut self, _buf: &mut [u8]) -> ImageResult<u32> {$/;"	P	implementation:JPEGDecoder
read_scanline	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^    fn read_scanline(&mut self, buf: &mut [u8]) -> ImageResult<u32> {$/;"	P	implementation:PNGDecoder
read_scanline	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/decoder.rs	/^    fn read_scanline(&mut self, _buf: &mut [u8]) -> ImageResult<u32> {$/;"	P	implementation:PPMDecoder
read_scanline	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    fn read_scanline(&mut self, _buf: &mut [u8]) -> ImageResult<u32> {$/;"	P	implementation:TGADecoder
read_scanline	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    fn read_scanline(&mut self, _: &mut [u8]) -> ImageResult<u32> {$/;"	P	implementation:TIFFDecoder
read_scanline	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/decoder.rs	/^    fn read_scanline(&mut self, buf: &mut [u8]) -> ImageResult<u32> {$/;"	P	implementation:WebpDecoder
read_segment_updates	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    fn read_segment_updates(&mut self) {$/;"	P	implementation:VP8Decoder
read_short	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    pub fn read_short(&mut self) -> Result<u16, io::Error> {$/;"	P	implementation:TIFFDecoder
read_source	/home/cht/Rust/robinson/src/main.rs	/^fn read_source(filename: String) -> String {$/;"	f
read_u16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^    fn read_u16(&mut self) -> Result<u16, io::Error> {$/;"	P	interface:EndianReader
read_u32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^    fn read_u32(&mut self) -> Result<u32, io::Error> {$/;"	P	interface:EndianReader
read_vp8_header	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/decoder.rs	/^    fn read_vp8_header(&mut self) -> ImageResult<()> {$/;"	P	implementation:WebpDecoder
read_with_tree	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    pub fn read_with_tree(&mut self, tree: &[i8], probs: &[Prob], start: isize) -> i8 {$/;"	P	implementation:BoolReader
reader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    pub fn reader(&mut self) -> &mut R {$/;"	P	implementation:BMPDecoder
reader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/decoder.rs	/^    reader: BufReader<R>,$/;"	m	struct:PPMDecoder
reader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    reader: SmartReader<R>,$/;"	m	struct:TIFFDecoder
reader	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^    reader: R,$/;"	m	struct:SmartReader
reader_writer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/bitstream.rs	/^    fn reader_writer() {$/;"	f	module:test
real_height	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^    fn real_height(&self) -> u16 {$/;"	P	implementation:DirEntry
real_width	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^    fn real_width(&self) -> u16 {$/;"	P	implementation:DirEntry
reconstruct	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    fn reconstruct(&mut self, code: Option<Code>) -> io::Result<&[u8]> {$/;"	P	implementation:DecodingDict
relative_dist	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^    fn relative_dist(a: Rgb<f32>, b: Rgb<f32>) -> f32 {$/;"	f	function:to_rgbe8_test
render	/home/cht/Rust/robinson/src/pdf.rs	/^pub fn render<W: Write + Seek>($/;"	f
render_background	/home/cht/Rust/robinson/src/painting.rs	/^fn render_background(list: &mut DisplayList, layout_box: &LayoutBox) {$/;"	f
render_borders	/home/cht/Rust/robinson/src/painting.rs	/^fn render_borders(list: &mut DisplayList, layout_box: &LayoutBox) {$/;"	f
render_item	/home/cht/Rust/robinson/src/pdf.rs	/^fn render_item<W: Write>(item: &DisplayCommand, output: &mut W) -> io::Result<()> {$/;"	f
render_layout_box	/home/cht/Rust/robinson/src/painting.rs	/^fn render_layout_box(list: &mut DisplayList, layout_box: &LayoutBox) {$/;"	f
render_page	/home/cht/Rust/robinson/src/pdf.rs	/^    fn render_page<F>(&mut self, width: f32, height: f32, render_contents: F) -> io::Result<()>$/;"	P	implementation:Pdf
replace	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/mod.rs	/^pub fn replace<I: GenericImage>(bottom: &mut I, top: &I, x: u32, y:u32) {$/;"	f
reqopt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn reqopt($/;"	P	implementation:Options
reserved	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^    reserved: u8,$/;"	m	struct:DirEntry
reset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    fn reset(&mut self) {$/;"	P	implementation:DecodingDict
reset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    fn reset(&mut self) {$/;"	P	implementation:EncodingDict
resize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn resize(&self,$/;"	P	implementation:DynamicImage
resize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^pub fn resize<I: GenericImage + 'static>(image: &I, nwidth: u32, nheight: u32,$/;"	f
resize_exact	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn resize_exact(&self,$/;"	P	implementation:DynamicImage
rev_hpredict	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^fn rev_hpredict(image: DecodingResult, size: (u32, u32), color_type: ColorType) -> ImageResult<D/;"	f
rev_hpredict_nsamp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^fn rev_hpredict_nsamp<T>(mut image: Vec<T>,$/;"	f
reverse_encoding	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    fn reverse_encoding(&mut self, pixels: &mut [u8]) {$/;"	P	implementation:TGADecoder
rgb_to_ycbcr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^fn rgb_to_ycbcr(r: u8, g: u8, b: u8) -> (u8, u8, u8) {$/;"	f
rgbe8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^pub fn rgbe8(r: u8, g: u8, b: u8, e: u8) -> RGBE8Pixel {$/;"	f
right	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    right: Option<Code>,$/;"	m	struct:Node
right	/home/cht/Rust/robinson/src/layout.rs	/^    pub right: f32,$/;"	m	struct:EdgeSizes
rl_marker	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    fn rl_marker(pix : RGBE8Pixel) -> Option<usize> {$/;"	f	function:decode_old_rle
rle_compress	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^fn rle_compress(data: &[u8], rle: &mut Vec<u8>) {$/;"	f
rotate180	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn rotate180(&self) -> DynamicImage {$/;"	P	implementation:DynamicImage
rotate180	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/affine.rs	/^pub fn rotate180<I: GenericImage + 'static>(image:  &I)$/;"	f
rotate270	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn rotate270(&self) -> DynamicImage {$/;"	P	implementation:DynamicImage
rotate270	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/affine.rs	/^pub fn rotate270<I: GenericImage + 'static>(image:  &I)$/;"	f
rotate90	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn rotate90(&self) -> DynamicImage {$/;"	P	implementation:DynamicImage
rotate90	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/affine.rs	/^pub fn rotate90<I: GenericImage + 'static>(image:  &I)$/;"	f
round_trip_3px_rgb	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/encoder.rs	/^    fn round_trip_3px_rgb() {$/;"	f	module:tests
round_trip_gray	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/encoder.rs	/^    fn round_trip_gray() {$/;"	f	module:tests
round_trip_graya	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/encoder.rs	/^    fn round_trip_graya() {$/;"	f	module:tests
round_trip_image	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/encoder.rs	/^    fn round_trip_image(image: &[u8], width: u32, height: u32, c: ColorType) -> Vec<u8> {$/;"	f	module:tests
round_trip_single_pixel_rgb	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/encoder.rs	/^    fn round_trip_single_pixel_rgb() {$/;"	f	module:tests
round_trip_single_pixel_rgba	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/encoder.rs	/^    fn round_trip_single_pixel_rgba() {$/;"	f	module:tests
roundtrip_sanity_check	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    fn roundtrip_sanity_check() {$/;"	f	module:tests
row_len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn row_len(&mut self) -> ImageResult<usize> {$/;"	P	implementation:BMPDecoder
row_len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/gif.rs	/^    fn row_len(&mut self) -> ImageResult<usize> {$/;"	P	implementation:Decoder
row_len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    fn row_len(&mut self) -> ImageResult<usize> {$/;"	P	implementation:HDRAdapter
row_len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^    fn row_len(&mut self) -> ImageResult<usize> {$/;"	P	implementation:ICODecoder
row_len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn row_len(&mut self) -> ImageResult<usize>;$/;"	P	interface:ImageDecoder
row_len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/decoder.rs	/^    fn row_len(&mut self) -> ImageResult<usize> {$/;"	P	implementation:JPEGDecoder
row_len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^    fn row_len(&mut self) -> ImageResult<usize> {$/;"	P	implementation:PNGDecoder
row_len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/decoder.rs	/^    fn row_len(&mut self) -> ImageResult<usize> {$/;"	P	implementation:PPMDecoder
row_len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    fn row_len(&mut self) -> ImageResult<usize> {$/;"	P	implementation:TGADecoder
row_len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    fn row_len(&mut self) -> ImageResult<usize> {$/;"	P	implementation:TIFFDecoder
row_len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/decoder.rs	/^    fn row_len(&mut self) -> ImageResult<usize> {$/;"	P	implementation:WebpDecoder
rows	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn rows<'a>(&self, pixel_data: &'a mut Vec<u8>) -> RowIterator<'a> {$/;"	P	implementation:BMPDecoder
rules	/home/cht/Rust/robinson/src/css.rs	/^    pub rules: Vec<Rule>,$/;"	m	struct:Stylesheet
runiter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^    runiter: RunIterator<'a>,$/;"	m	struct:NorunCombineIterator
runiterator_test	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^fn runiterator_test() {$/;"	f
sample	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/mod.rs	/^mod sample;$/;"	n
samplefac	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/nq.rs	/^    samplefac: i32,$/;"	m	struct:NeuQuant
samples	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    samples: u8,$/;"	m	struct:TIFFDecoder
save	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    pub fn save<Q>(&self, path: Q) -> io::Result<()> where Q: AsRef<Path> {$/;"	f
save	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn save<W: Write>(&self, w: &mut W, format: ImageFormat) -> ImageResult<()> {$/;"	P	implementation:DynamicImage
save_buffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^pub fn save_buffer<P>(path: P, buf: &[u8], width: u32, height: u32, color: color::ColorType)$/;"	f
save_buffer_impl	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^fn save_buffer_impl(path: &Path, buf: &[u8], width: u32, height: u32, color: color::ColorType)$/;"	f
scanline	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    scanline: usize, \/\/ current scanline$/;"	m	struct:HDRImageDecoderIterator
scanline_cnt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    scanline_cnt: usize,$/;"	m	struct:HDRImageDecoderIterator
search_and_insert	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    fn search_and_insert(&mut self, i: Option<Code>, c: u8) -> Option<Code> {$/;"	P	implementation:EncodingDict
search_initials	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    fn search_initials(&self, i: Code) -> Code {$/;"	P	implementation:EncodingDict
seek	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^    fn seek(&mut self, pos: io::SeekFrom) -> io::Result<u64> {$/;"	P	implementation:SmartReader
seek_to_start	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^    fn seek_to_start<R: Read + Seek>(&self, r: &mut R) -> ImageResult<()> {$/;"	P	implementation:DirEntry
segment	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    segment: [Segment; MAX_SEGMENTS],$/;"	m	struct:VP8Decoder
segment_tree_probs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    segment_tree_probs: [Prob; 3],$/;"	m	struct:VP8Decoder
segmentid	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    segmentid:   u8,$/;"	m	struct:MacroBlock
segments_enabled	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    segments_enabled: bool,$/;"	m	struct:VP8Decoder
segments_update_map	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    segments_update_map: bool,$/;"	m	struct:VP8Decoder
selected_entry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^    selected_entry: DirEntry,$/;"	m	struct:ICODecoder
selectors	/home/cht/Rust/robinson/src/css.rs	/^    pub selectors: Vec<Selector>,$/;"	m	struct:Rule
set_1bit_pixel_run	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^fn set_1bit_pixel_run<'a, T: Iterator<Item=&'a u8>>(pixel_iter: &mut ChunksMut<u8>,$/;"	f
set_4bit_pixel_run	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^fn set_4bit_pixel_run<'a, T: Iterator<Item=&'a u8>>(pixel_iter: &mut ChunksMut<u8>,$/;"	f
set_8bit_pixel_run	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^fn set_8bit_pixel_run<'a, T: Iterator<Item=&'a u8>>(pixel_iter: &mut ChunksMut<u8>,$/;"	f
set_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^        macro_rules! set_pixel {$/;"	M	function:set_4bit_pixel_run
sg	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^        #[inline] fn sg<T: Primitive + Zero>(v: f32, scale: f32, gamma: f32) -> T { $/;"	f	method:RGBE8Pixel::to_ldr_scale_gamma
sharpness_level	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    sharpness_level: u8,$/;"	m	struct:Frame
shift	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    shift: u32,$/;"	m	struct:Bitfield
short_name	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    short_name: String,$/;"	m	struct:OptGroup
short_usage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn short_usage(&self, program_name: &str) -> String {$/;"	P	implementation:Options
sinc	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^fn sinc(t: f32) -> f32 {$/;"	f
size_hint	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:HDRImageDecoderIterator
slice_buffer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn slice_buffer() {$/;"	f	module:test
specificity	/home/cht/Rust/robinson/src/css.rs	/^    pub fn specificity(&self) -> Specificity {$/;"	P	implementation:Selector
specified_values	/home/cht/Rust/robinson/src/style.rs	/^    pub specified_values: PropertyMap,$/;"	m	struct:StyledNode
specified_values	/home/cht/Rust/robinson/src/style.rs	/^fn specified_values(elem: &ElementData, stylesheet: &Stylesheet) -> PropertyMap {$/;"	f
split_at_first	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^fn split_at_first<'a>(s: &'a Cow<'a, str>, separator: &str) -> Option<(&'a str, &'a str)> {$/;"	f
split_at_first_test	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^fn split_at_first_test() {$/;"	f
start_offset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    start_offset: usize,$/;"	m	struct:ColorMap
starts_with	/home/cht/Rust/robinson/src/html.rs	/^    fn starts_with(&self, s: &str) -> bool {$/;"	P	implementation:Parser
stream	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^mod stream;$/;"	n
style	/home/cht/Rust/robinson/src/main.rs	/^pub mod style;$/;"	n
style_tree	/home/cht/Rust/robinson/src/style.rs	/^pub fn style_tree<'a>(root: &'a Node, stylesheet: &'a Stylesheet) -> StyledNode<'a> {$/;"	f
sub_image	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn sub_image<'a>(&'a mut self, x: u32, y: u32, width: u32, height: u32)$/;"	P	interface:GenericImage
sum	/home/cht/Rust/robinson/src/layout.rs	/^fn sum<I>(iter: I) -> f32$/;"	f
support	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^    pub support: f32$/;"	m	struct:Filter
t	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^    fn t(s: &str, i: usize, u: &[String]) {$/;"	f	function:test_split_within
table	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    table: Vec<(Option<Code>, u8)>,$/;"	m	struct:DecodingDict
table	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/lzw.rs	/^    table: Vec<Node>,$/;"	m	struct:EncodingDict
tables	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    tables: Vec<u8>,$/;"	m	struct:JPEGEncoder
tag_name	/home/cht/Rust/robinson/src/css.rs	/^    pub tag_name: Option<String>,$/;"	m	struct:SimpleSelector
tag_name	/home/cht/Rust/robinson/src/dom.rs	/^    pub tag_name: String,$/;"	m	struct:ElementData
tags	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/ifd.rs	/^macro_rules! tags {$/;"	M
tell	/home/cht/Rust/robinson/src/pdf.rs	/^    fn tell(&mut self) -> io::Result<u64> {$/;"	P	implementation:Pdf
test	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^mod test {$/;"	n
test	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^mod test {$/;"	n
test	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^mod test {$/;"	n
test	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/affine.rs	/^mod test {$/;"	n
test	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/colorops.rs	/^mod test {$/;"	n
test	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/mod.rs	/^mod test {$/;"	n
test	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/bitstream.rs	/^mod test {$/;"	n
test_aliases_long_and_short	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_aliases_long_and_short() {$/;"	f
test_args_with_equals	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_args_with_equals() {$/;"	f
test_bitfield_len	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    fn test_bitfield_len() {$/;"	f	module:test
test_combined	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_combined() {$/;"	f
test_dither	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/colorops.rs	/^    fn test_dither() {$/;"	f	module:test
test_empty_file	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    fn test_empty_file() {$/;"	f	module:test
test_flip_horizontal	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/affine.rs	/^    fn test_flip_horizontal() {$/;"	f	module:test
test_flip_vertical	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/affine.rs	/^    fn test_flip_vertical() {$/;"	f	module:test
test_free_argument_is_hyphen	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_free_argument_is_hyphen() {$/;"	f
test_get_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn test_get_pixel() {$/;"	f	module:test
test_image_alpha_blending	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn test_image_alpha_blending() {$/;"	f	module:tests
test_image_in_image	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/mod.rs	/^    fn test_image_in_image() {$/;"	f	module:tests
test_image_in_image_outside_of_bounds	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/mod.rs	/^    fn test_image_in_image_outside_of_bounds() {$/;"	f	module:tests
test_in_bounds	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn test_in_bounds() {$/;"	f	module:tests
test_issue_186	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^    fn test_issue_186() {$/;"	f	module:tests
test_long_name_too_short	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_long_name_too_short() {$/;"	f
test_long_only_mode	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_long_only_mode() {$/;"	f
test_long_only_mode_no_short_parse	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_long_only_mode_no_short_parse() {$/;"	f
test_long_only_usage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_long_only_usage() {$/;"	f
test_long_to_short	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_long_to_short() {$/;"	f
test_mixed_stop	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_mixed_stop() {$/;"	f
test_mixed_stop_hyphen	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_mixed_stop_hyphen() {$/;"	f
test_multi	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_multi() {$/;"	f
test_mut_iter	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn test_mut_iter() {$/;"	f	module:test
test_nonexistant_opt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_nonexistant_opt() {$/;"	f
test_normal_mode_no_long_parse	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_normal_mode_no_long_parse() {$/;"	f
test_nospace	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_nospace() {$/;"	f
test_nospace_conflict	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_nospace_conflict() {$/;"	f
test_opt_default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_opt_default() {$/;"	f
test_opt_end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_opt_end() {$/;"	f
test_opt_get	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_opt_get() {$/;"	f
test_opt_get_default	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_opt_get_default() {$/;"	f
test_opt_only_end	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_opt_only_end() {$/;"	f
test_opt_positions	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_opt_positions() {$/;"	f
test_opt_strs_pos	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_opt_strs_pos() {$/;"	f
test_optflag	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_optflag() {$/;"	f
test_optflag_long_arg	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_optflag_long_arg() {$/;"	f
test_optflag_missing	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_optflag_missing() {$/;"	f
test_optflag_multi	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_optflag_multi() {$/;"	f
test_optflag_short_arg	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_optflag_short_arg() {$/;"	f
test_optflagmulti_long1	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_optflagmulti_long1() {$/;"	f
test_optflagmulti_long2	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_optflagmulti_long2() {$/;"	f
test_optflagmulti_mix	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_optflagmulti_mix() {$/;"	f
test_optflagmulti_short1	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_optflagmulti_short1() {$/;"	f
test_optflagmulti_short2a	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_optflagmulti_short2a() {$/;"	f
test_optflagmulti_short2b	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_optflagmulti_short2b() {$/;"	f
test_optflagopt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_optflagopt() {$/;"	f
test_optmulti	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_optmulti() {$/;"	f
test_optmulti_missing	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_optmulti_missing() {$/;"	f
test_optmulti_multi	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_optmulti_multi() {$/;"	f
test_optmulti_no_arg	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_optmulti_no_arg() {$/;"	f
test_optopt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_optopt() {$/;"	f
test_optopt_missing	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_optopt_missing() {$/;"	f
test_optopt_multi	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_optopt_multi() {$/;"	f
test_optopt_no_arg	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_optopt_no_arg() {$/;"	f
test_reqopt	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_reqopt() {$/;"	f
test_reqopt_missing	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_reqopt_missing() {$/;"	f
test_reqopt_multi	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_reqopt_multi() {$/;"	f
test_reqopt_no_arg	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_reqopt_no_arg() {$/;"	f
test_rotate180	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/affine.rs	/^    fn test_rotate180() {$/;"	f	module:test
test_rotate270	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/affine.rs	/^    fn test_rotate270() {$/;"	f	module:test
test_rotate90	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/affine.rs	/^    fn test_rotate90() {$/;"	f	module:test
test_roundtrip_ppm	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/mod.rs	/^    fn test_roundtrip_ppm() {$/;"	f	module:test
test_roundtrip_ppm_16bit	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/mod.rs	/^    fn test_roundtrip_ppm_16bit() {$/;"	f	module:test
test_short_usage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_short_usage() {$/;"	f
test_split_within	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_split_within() {$/;"	f
test_undefined_opt_present	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_undefined_opt_present() {$/;"	f
test_unrecognized_option	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_unrecognized_option() {$/;"	f
test_usage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_usage() {$/;"	f
test_usage_description_multibyte_handling	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_usage_description_multibyte_handling() {$/;"	f
test_usage_description_newline_handling	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_usage_description_newline_handling() {$/;"	f
test_usage_description_wrapping	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_usage_description_wrapping() {$/;"	f
test_usage_long_only	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_usage_long_only() {$/;"	f
test_usage_multiwidth	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_usage_multiwidth() {$/;"	f
test_usage_short_only	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/tests/mod.rs	/^fn test_usage_short_only() {$/;"	f
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^mod tests;$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/encoder.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/mod.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^mod tests {$/;"	n
tests	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^mod tests {$/;"	n
text	/home/cht/Rust/robinson/src/dom.rs	/^pub fn text(data: String) -> Node {$/;"	f
tga	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/lib.rs	/^pub mod tga;$/;"	n
tiff	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/lib.rs	/^pub mod tiff;$/;"	n
to_hdr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    pub fn to_hdr(self) -> Rgb<f32> {$/;"	P	implementation:RGBE8Pixel
to_image	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    pub fn to_image(&self) -> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> {$/;"	f
to_ldr	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    pub fn to_ldr<T: Primitive + Zero>(self) -> Rgb<T> {$/;"	P	implementation:RGBE8Pixel
to_ldr_scale_gamma	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    pub fn to_ldr_scale_gamma<T: Primitive + Zero>(self, scale: f32, gamma: f32) -> Rgb<T> {$/;"	P	implementation:RGBE8Pixel
to_luma	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn to_luma(&self) -> Luma<Self::Subpixel>;$/;"	P	interface:Pixel
to_luma	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn to_luma(&self) -> GrayImage {$/;"	P	implementation:DynamicImage
to_luma_alpha	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn to_luma_alpha(&self) -> LumaA<Self::Subpixel>;$/;"	P	interface:Pixel
to_luma_alpha	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn to_luma_alpha(&self) -> GrayAlphaImage {$/;"	P	implementation:DynamicImage
to_px	/home/cht/Rust/robinson/src/css.rs	/^    pub fn to_px(&self) -> f32 {$/;"	P	implementation:Value
to_rgb	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn to_rgb(&self) -> Rgb<Self::Subpixel>;$/;"	P	interface:Pixel
to_rgb	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn to_rgb(&self) -> RgbImage {$/;"	P	implementation:DynamicImage
to_rgba	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    fn to_rgba(&self) -> Rgba<Self::Subpixel>;$/;"	P	interface:Pixel
to_rgba	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn to_rgba(&self) -> RgbaImage {$/;"	P	implementation:DynamicImage
to_rgbe8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^pub fn to_rgbe8(pix: Rgb<f32>) -> RGBE8Pixel {$/;"	f
to_rgbe8_test	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^fn to_rgbe8_test() {$/;"	f
to_string	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    fn to_string(&self) -> String {$/;"	P	implementation:Name
token_probs	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    token_probs: Box<TokenProbTables>,$/;"	m	struct:VP8Decoder
top	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/animation.rs	/^    pub fn top(&self) -> u32 {$/;"	P	implementation:Frame
top	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/animation.rs	/^    top: u32,$/;"	m	struct:Frame
top	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    top: Vec<MacroBlock>,$/;"	m	struct:VP8Decoder
top	/home/cht/Rust/robinson/src/layout.rs	/^    pub top: f32,$/;"	m	struct:EdgeSizes
top_border	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    top_border: Vec<u8>,$/;"	m	struct:VP8Decoder
top_down	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    top_down: bool,$/;"	m	struct:BMPDecoder
top_pixels	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^fn top_pixels(a: &[u8], x0: usize, y0: usize, stride: usize) -> (u8, u8, u8, u8, u8, u8, u8, u8)/;"	f
topleft_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^fn topleft_pixel(a: &[u8], x0: usize, y0: usize, stride: usize) -> u8 {$/;"	f
tq	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    tq: u8,$/;"	m	struct:Component
traits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/lib.rs	/^mod traits;$/;"	n
transform	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/mod.rs	/^mod transform;$/;"	n
transform	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/mod.rs	/^mod transform;$/;"	n
triangle_kernel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^pub fn triangle_kernel(x: f32) -> f32 {$/;"	f
trouble	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    trouble: bool, \/\/ optimization, true indicates that we need to check something$/;"	m	struct:HDRImageDecoderIterator
type_	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/ifd.rs	/^    type_: Type,$/;"	m	struct:Entry
u16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^impl Wrapping for u16 {$/;"	c
u16	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/traits.rs	/^impl Primitive for u16 {$/;"	c
u32	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/traits.rs	/^impl Primitive for u32 {$/;"	c
u64	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/traits.rs	/^impl Primitive for u64 {$/;"	c
u8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^impl Wrapping for u8 {$/;"	c
u8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/traits.rs	/^impl Primitive for u8 {$/;"	c
unsafe_get_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    unsafe fn unsafe_get_pixel(&self, x: u32, y: u32) -> P {$/;"	f
unsafe_get_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    unsafe fn unsafe_get_pixel(&self, x: u32, y: u32) -> Self::Pixel {$/;"	P	interface:GenericImage
unsafe_put_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    unsafe fn unsafe_put_pixel(&mut self, x: u32, y: u32, pixel: P) {$/;"	f
unsafe_put_pixel	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    unsafe fn unsafe_put_pixel(&mut self, x: u32, y: u32, pixel: Self::Pixel) {$/;"	P	interface:GenericImage
unsharpen	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/dynimage.rs	/^    pub fn unsharpen(&self, sigma: f32, threshold: i32) -> DynamicImage {$/;"	P	implementation:DynamicImage
unsharpen	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^pub fn unsharpen<I, P, S>(image: &I, sigma: f32, threshold: i32)$/;"	f
update_header_info	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    fn update_header_info<'a>(&mut self, line: &Cow<'a, str>, strict: bool) -> ImageResult<()> {$/;"	P	implementation:HDRMetadata
update_token_probabilities	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    fn update_token_probabilities(&mut self) {$/;"	P	implementation:VP8Decoder
usage	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn usage(&self, brief: &str) -> String {$/;"	P	implementation:Options
usage_items	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    fn usage_items<'a>(&'a self) -> Box<dyn Iterator<Item = String> + 'a> {$/;"	P	implementation:Options
usage_with_format	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    pub fn usage_with_format<F: FnMut(&mut dyn Iterator<Item = String>) -> String>($/;"	P	implementation:Options
usize	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/traits.rs	/^impl Primitive for usize {$/;"	c
utils	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/lib.rs	/^mod utils;$/;"	n
utils	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/math/mod.rs	/^pub mod utils;$/;"	n
uvac	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    uvac: i16,$/;"	m	struct:Segment
uvdc	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    uvdc: i16,$/;"	m	struct:Segment
v	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    v: u8,$/;"	m	struct:Component
val	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/ifd.rs	/^    pub fn val<R: Read + Seek>(&self, decoder: &mut super::TIFFDecoder<R>)$/;"	P	implementation:Entry
valid_identifier_char	/home/cht/Rust/robinson/src/css.rs	/^fn valid_identifier_char(c: char) -> bool {$/;"	f
validate_names	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^fn validate_names(short_name: &str, long_name: &str) {$/;"	f
vals	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/getopts-0.2.21/src/lib.rs	/^    vals: Vec<Vec<(usize, Optval)>>,$/;"	m	struct:Matches
value	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    value: u32,$/;"	m	struct:BoolReader
value	/home/cht/Rust/robinson/src/css.rs	/^    pub value: Value,$/;"	m	struct:Declaration
value	/home/cht/Rust/robinson/src/style.rs	/^    pub fn value(&self, name: &str) -> Option<Value> {$/;"	P	implementation:StyledNode
value_at	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^fn value_at(s: &[u8], index: usize) -> u8 {$/;"	f
version	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    version: u8,$/;"	m	struct:Frame
vertical_sample	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/imageops/sample.rs	/^fn vertical_sample<I, P, S>(image: &I, new_height: u32,$/;"	f
vp8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/mod.rs	/^pub mod vp8;/;"	n
w	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/gif.rs	/^    w: W,$/;"	m	struct:Encoder
w	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^    w: W,$/;"	m	struct:HDREncoder
w	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/encoder.rs	/^    w: W$/;"	m	struct:ICOEncoder
w	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    w: &'a mut W,$/;"	m	struct:BitWriter
w	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/png.rs	/^    w: W$/;"	m	struct:PNGEncoder
w	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/encoder.rs	/^    w: &'a mut W$/;"	m	struct:PPMEncoder
webp	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/lib.rs	/^pub mod webp;$/;"	n
width	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/decoder.rs	/^    width: i32,$/;"	m	struct:BMPDecoder
width	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    pub fn width(&self) -> u32 {$/;"	f
width	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    width:  u32$/;"	m	struct:EnumeratePixels
width	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    width:  u32$/;"	m	struct:EnumeratePixelsMut
width	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    width: u32,$/;"	m	struct:ImageBuffer
width	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    pub width: u32,$/;"	m	struct:HDRMetadata
width	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    width: u32,$/;"	m	struct:HDRDecoder
width	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/decoder.rs	/^    width: u8,$/;"	m	struct:DirEntry
width	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    fn width(&self) -> u32 {$/;"	P	interface:GenericImage
width	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    width:  u32,$/;"	m	struct:MutPixels
width	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    width:  u32,$/;"	m	struct:Pixels
width	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/decoder.rs	/^    width: u32,$/;"	m	struct:PPMDecoder
width	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    width: usize,$/;"	m	struct:TGADecoder
width	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    width: u32,$/;"	m	struct:TIFFDecoder
width	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    pub width: u16,$/;"	m	struct:Frame
width	/home/cht/Rust/robinson/src/layout.rs	/^    pub width: f32,$/;"	m	struct:Rect
width	/home/cht/Rust/robinson/src/painting.rs	/^    pub width: usize,$/;"	m	struct:Canvas
with_strictness	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_decoder.rs	/^    pub fn with_strictness(mut reader: R, strict: bool) -> ImageResult<HDRDecoder<R>> {  $/;"	P	implementation:HDRDecoder
wrap	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/stream.rs	/^    pub fn wrap(reader: R, byte_order: ByteOrder) -> SmartReader<R> {$/;"	f
wrapping_add	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    fn wrapping_add(&self, other: Self) -> Self {$/;"	P	implementation:u16
wrapping_add	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    fn wrapping_add(&self, other: Self) -> Self {$/;"	P	implementation:u8
wrapping_add	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tiff/decoder/mod.rs	/^    fn wrapping_add(&self, other: Self) -> Self;$/;"	P	interface:Wrapping
write_bits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    fn write_bits(&mut self, bits: u16, size: u8) -> io::Result<()> {$/;"	P	implementation:BitWriter
write_bits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/bitstream.rs	/^    fn write_bits(&mut self, v: u16, n: u8) -> io::Result<()> {$/;"	f
write_bits	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/utils/bitstream.rs	/^    fn write_bits(&mut self, v: u16, n: u8) -> io::Result<()>;$/;"	P	interface:BitWriter
write_block	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    fn write_block($/;"	P	implementation:BitWriter
write_direntry	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/encoder.rs	/^fn write_direntry<W: Write>(w: &mut W, width: u32, height: u32,$/;"	f
write_icondir	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/encoder.rs	/^fn write_icondir<W: Write>(w: &mut W, num_images: u16) -> io::Result<()> {$/;"	f
write_image	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/encoder.rs	/^    fn write_image($/;"	P	implementation:PPMEncoder
write_magic_number	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/encoder.rs	/^    fn write_magic_number(&mut self) -> io::Result<()> {$/;"	P	implementation:PPMEncoder
write_metadata	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ppm/encoder.rs	/^    fn write_metadata(&mut self, width: u32, height: u32, pixel_type: color::ColorType) -> io::R/;"	P	implementation:PPMEncoder
write_new_object	/home/cht/Rust/robinson/src/pdf.rs	/^    fn write_new_object<F, T>(&mut self, write_content: F) -> io::Result<T>$/;"	P	implementation:Pdf
write_object_with_id	/home/cht/Rust/robinson/src/pdf.rs	/^    fn write_object_with_id<F, T>(&mut self, id: usize, write_content: F) -> io::Result<T>$/;"	P	implementation:Pdf
write_rgbe8	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/hdr/hdr_encoder.rs	/^fn write_rgbe8<W: Write>(w: &mut W, v: RGBE8Pixel) -> Result<()> {$/;"	f
write_row_pad	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/encoder.rs	/^    fn write_row_pad(&mut self, row_pad_size: u32) -> io::Result<()> {$/;"	P	implementation:BMPEncoder
write_segment	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    fn write_segment(&mut self, marker: u8, data: Option<&[u8]>) -> io::Result<()> {$/;"	P	implementation:BitWriter
write_width_or_height	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/ico/encoder.rs	/^fn write_width_or_height<W: Write>(w: &mut W, value: u32) -> io::Result<()> {$/;"	f
writer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/bmp/encoder.rs	/^    writer: &'a mut W,$/;"	m	struct:BMPEncoder
writer	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/jpeg/encoder.rs	/^    writer: BitWriter<'a, W>,$/;"	m	struct:JPEGEncoder
x	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    x:      u32,$/;"	m	struct:EnumeratePixels
x	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    x:      u32,$/;"	m	struct:EnumeratePixelsMut
x	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    x:      u32,$/;"	m	struct:MutPixels
x	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    x:      u32,$/;"	m	struct:Pixels
x	/home/cht/Rust/robinson/src/layout.rs	/^    pub x: f32,$/;"	m	struct:Rect
x_origin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    x_origin: u16,         \/\/ x-origin of image$/;"	m	struct:Header
xoffset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    xoffset: u32,$/;"	m	struct:SubImage
xstride	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    xstride: u32,$/;"	m	struct:SubImage
y	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    y:      u32,$/;"	m	struct:EnumeratePixels
y	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/buffer.rs	/^    y:      u32,$/;"	m	struct:EnumeratePixelsMut
y	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    y:      u32,$/;"	m	struct:MutPixels
y	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    y:      u32,$/;"	m	struct:Pixels
y	/home/cht/Rust/robinson/src/layout.rs	/^    pub y: f32,$/;"	m	struct:Rect
y2ac	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    y2ac: i16,$/;"	m	struct:Segment
y2dc	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    y2dc: i16,$/;"	m	struct:Segment
y_origin	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/tga/decoder.rs	/^    y_origin: u16,         \/\/ y-origin of image$/;"	m	struct:Header
yac	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    yac: i16,$/;"	m	struct:Segment
ybuf	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    pub ybuf: Vec<u8>,$/;"	m	struct:Frame
ydc	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/webp/vp8.rs	/^    ydc: i16,$/;"	m	struct:Segment
yoffset	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    yoffset: u32,$/;"	m	struct:SubImage
ystride	/home/cht/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.14.0/./src/image.rs	/^    ystride: u32,$/;"	m	struct:SubImage
